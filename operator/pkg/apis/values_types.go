//go:build !proto_operator_values
// +build !proto_operator_values

// Copyright Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: pkg/apis/values_types.proto

package apis

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	v1 "k8s.io/api/core/v1"
	v11 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type ResourceScope int32

const (
	ResourceScope_undefined ResourceScope = 0
	ResourceScope_all       ResourceScope = 1
	ResourceScope_cluster   ResourceScope = 2
	ResourceScope_namespace ResourceScope = 3
)

// Enum value maps for ResourceScope.
var (
	ResourceScope_name = map[int32]string{
		0: "undefined",
		1: "all",
		2: "cluster",
		3: "namespace",
	}
	ResourceScope_value = map[string]int32{
		"undefined": 0,
		"all":       1,
		"cluster":   2,
		"namespace": 3,
	}
)

// Mode for the ingress controller.
type IngressControllerMode int32

const (
	// Unspecified Istio ingress controller.
	IngressControllerMode_UNSPECIFIED IngressControllerMode = 0
	// Selects all Ingress resources, with or without Istio annotation.
	IngressControllerMode_DEFAULT IngressControllerMode = 1
	// Selects only resources with istio annotation.
	IngressControllerMode_STRICT IngressControllerMode = 2
	// No ingress or sync.
	IngressControllerMode_OFF IngressControllerMode = 3
)

// Enum value maps for IngressControllerMode.
var (
	IngressControllerMode_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "DEFAULT",
		2: "STRICT",
		3: "OFF",
	}
	IngressControllerMode_value = map[string]int32{
		"UNSPECIFIED": 0,
		"DEFAULT":     1,
		"STRICT":      2,
		"OFF":         3,
	}
)

// Specifies which tracer to use.
type Tracer int32

const (
	Tracer_zipkin          Tracer = 0
	Tracer_lightstep       Tracer = 1
	Tracer_datadog         Tracer = 2
	Tracer_stackdriver     Tracer = 3
	Tracer_openCensusAgent Tracer = 4
	Tracer_none            Tracer = 5
)

// Enum value maps for Tracer.
var (
	Tracer_name = map[int32]string{
		0: "zipkin",
		1: "lightstep",
		2: "datadog",
		3: "stackdriver",
		4: "openCensusAgent",
		5: "none",
	}
	Tracer_value = map[string]int32{
		"zipkin":          0,
		"lightstep":       1,
		"datadog":         2,
		"stackdriver":     3,
		"openCensusAgent": 4,
		"none":            5,
	}
)

// Specifies the sidecar's default behavior when handling outbound traffic from the application.
type OutboundTrafficPolicyConfig_Mode int32

const (
	// Outbound traffic to unknown destinations will be allowed, in case there are no services or ServiceEntries for the destination port
	OutboundTrafficPolicyConfig_ALLOW_ANY OutboundTrafficPolicyConfig_Mode = 0
	// Restrict outbound traffic to services defined in the service registry as well as those defined through ServiceEntries
	OutboundTrafficPolicyConfig_REGISTRY_ONLY OutboundTrafficPolicyConfig_Mode = 1
)

// Enum value maps for OutboundTrafficPolicyConfig_Mode.
var (
	OutboundTrafficPolicyConfig_Mode_name = map[int32]string{
		0: "ALLOW_ANY",
		1: "REGISTRY_ONLY",
	}
	OutboundTrafficPolicyConfig_Mode_value = map[string]int32{
		"ALLOW_ANY":     0,
		"REGISTRY_ONLY": 1,
	}
)

// ArchConfig specifies the pod scheduling target architecture(amd64, ppc64le, s390x, arm64)
// for all the Istio control plane components.
type ArchConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Sets pod scheduling weight for amd64 arch
	Amd64 uint32 `protobuf:"varint,1,opt,name=amd64,proto3" json:"amd64,omitempty"`
	// Sets pod scheduling weight for ppc64le arch.
	Ppc64Le uint32 `protobuf:"varint,2,opt,name=ppc64le,proto3" json:"ppc64le,omitempty"`
	// Sets pod scheduling weight for s390x arch.
	S390X uint32 `protobuf:"varint,3,opt,name=s390x,proto3" json:"s390x,omitempty"`
	// Sets pod scheduling weight for arm64 arch.
	Arm64         uint32 `protobuf:"varint,4,opt,name=arm64,proto3" json:"arm64,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchConfig) GetAmd64() uint32 {
	if x != nil {
		return x.Amd64
	}
	return 0
}

func (x *ArchConfig) GetPpc64Le() uint32 {
	if x != nil {
		return x.Ppc64Le
	}
	return 0
}

func (x *ArchConfig) GetS390X() uint32 {
	if x != nil {
		return x.S390X
	}
	return 0
}

func (x *ArchConfig) GetArm64() uint32 {
	if x != nil {
		return x.Arm64
	}
	return 0
}

// Configuration for CNI.
type CNIConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Controls whether CNI is installed.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Hub to pull the container image from. Image will be `Hub/Image:Tag-Variant`.
	Hub string `protobuf:"bytes,2,opt,name=hub,proto3" json:"hub,omitempty"`
	// The container image tag to pull. Image will be `Hub/Image:Tag-Variant`.
	Tag *structpb.Value `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	// The container image variant to pull. Options are "debug" or "distroless". Unset will use the default for the given version.
	Variant string `protobuf:"bytes,29,opt,name=variant,proto3" json:"variant,omitempty"`
	// Image name to pull from. Image will be `Hub/Image:Tag-Variant`.
	// If Image contains a "/", it will replace the entire `image` in the pod.
	Image string `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	// Specifies the image pull policy. one of Always, Never, IfNotPresent.
	// Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated.
	//
	// More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	PullPolicy string `protobuf:"bytes,5,opt,name=pullPolicy,proto3" json:"pullPolicy,omitempty"`
	// The directory path within the cluster node's filesystem where the CNI binaries are to be installed. Typically /var/lib/cni/bin.
	CniBinDir string `protobuf:"bytes,6,opt,name=cniBinDir,proto3" json:"cniBinDir,omitempty"`
	// The directory path within the cluster node's filesystem where the CNI configuration files are to be installed. Typically /etc/cni/net.d.
	CniConfDir string `protobuf:"bytes,7,opt,name=cniConfDir,proto3" json:"cniConfDir,omitempty"`
	// The name of the CNI plugin configuration file. Defaults to istio-cni.conf.
	CniConfFileName string `protobuf:"bytes,8,opt,name=cniConfFileName,proto3" json:"cniConfFileName,omitempty"`
	// The directory path within the cluster node's filesystem where network namespaces are located.
	// Defaults to '/var/run/netns', in minikube/docker/others can be '/var/run/docker/netns'.
	CniNetnsDir string `protobuf:"bytes,31,opt,name=cniNetnsDir,proto3" json:"cniNetnsDir,omitempty"`
	// List of namespaces that should be ignored by the CNI plugin.
	ExcludeNamespaces []string `protobuf:"bytes,9,rep,name=excludeNamespaces,proto3" json:"excludeNamespaces,omitempty"`
	// K8s affinity to set on the istio-cni Pods. Can be used to exclude istio-cni from being scheduled on specified nodes.
	Affinity *v1.Affinity `protobuf:"bytes,20,opt,name=affinity,proto3" json:"affinity,omitempty"`
	// Environment variables passed to the CNI container.
	//
	// Examples:
	// env:
	//
	//	ENV_VAR_1: value1
	//	ENV_VAR_2: value2
	Env map[string]string `protobuf:"bytes,32,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Additional labels to apply to the istio-cni DaemonSet.
	DaemonSetLabels map[string]string `protobuf:"bytes,33,rep,name=daemonSetLabels,proto3" json:"daemonSetLabels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Additional annotations to apply to the istio-cni Pods.
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	PodAnnotations map[string]string `protobuf:"bytes,10,rep,name=podAnnotations,proto3" json:"podAnnotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Additional labels to apply to the istio-cni Pods.
	PodLabels map[string]string `protobuf:"bytes,34,rep,name=podLabels,proto3" json:"podLabels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// PodSecurityPolicy cluster role. No longer used anywhere.
	PspClusterRole string `protobuf:"bytes,11,opt,name=psp_cluster_role,json=pspClusterRole,proto3" json:"psp_cluster_role,omitempty"`
	// DEPRECATED. Configuration log level of istio-cni binary. By default, istio-cni sends all logs to the UDS server.
	// To see the logs, change global.logging.level to cni:debug.
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	LogLevel string `protobuf:"bytes,12,opt,name=logLevel,proto3" json:"logLevel,omitempty"`
	// Same as `global.logging.level`, but will override it if set
	Logging *GlobalLoggingConfig `protobuf:"bytes,25,opt,name=logging,proto3" json:"logging,omitempty"`
	// Configuration for the CNI Repair controller.
	Repair *CNIRepairConfig `protobuf:"bytes,13,opt,name=repair,proto3" json:"repair,omitempty"`
	// Configure the plugin as a chained CNI plugin. When true, the configuration is added to the CNI chain; when false,
	// the configuration is added as a standalone file in the CNI configuration directory.
	Chained bool `protobuf:"varint,14,opt,name=chained,proto3" json:"chained,omitempty"`
	// The resource quotas configuration for the CNI DaemonSet.
	ResourceQuotas *ResourceQuotas `protobuf:"bytes,16,opt,name=resource_quotas,json=resourceQuotas,proto3" json:"resource_quotas,omitempty"`
	// The k8s resource requests and limits for the istio-cni Pods.
	Resources *Resources `protobuf:"bytes,17,opt,name=resources,proto3" json:"resources,omitempty"`
	// No longer used for CNI. See: https://github.com/istio/istio/issues/49004
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	Privileged bool `protobuf:"varint,18,opt,name=privileged,proto3" json:"privileged,omitempty"`
	// The Container seccompProfile
	//
	// See: https://kubernetes.io/docs/tutorials/security/seccomp/
	SeccompProfile *v1.SeccompProfile `protobuf:"bytes,19,opt,name=seccompProfile,proto3" json:"seccompProfile,omitempty"`
	// Configuration for Istio Ambient.
	Ambient *CNIAmbientConfig `protobuf:"bytes,21,opt,name=ambient,proto3" json:"ambient,omitempty"`
	// Specifies the CNI provider. Can be either "default" or "multus". When set to "multus", an additional
	// NetworkAttachmentDefinition resource is deployed to the cluster to allow the istio-cni plugin to be
	// invoked in a cluster using the Multus CNI plugin.
	Provider string `protobuf:"bytes,22,opt,name=provider,proto3" json:"provider,omitempty"`
	// The number of pods that can be unavailable during a rolling update of the CNI DaemonSet (see
	// `updateStrategy.rollingUpdate.maxUnavailable` here:
	// https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/daemon-set-v1/#DaemonSetSpec).
	// May be specified as a number of pods or as a percent of the total number
	// of pods at the start of the update.
	RollingMaxUnavailable *IntOrString `protobuf:"bytes,23,opt,name=rollingMaxUnavailable,proto3" json:"rollingMaxUnavailable,omitempty"`
	// Specifies if an Istio owned CNI config should be created.
	IstioOwnedCNIConfig         bool   `protobuf:"varint,35,opt,name=istioOwnedCNIConfig,proto3" json:"istioOwnedCNIConfig,omitempty"`
	IstioOwnedCNIConfigFileName string `protobuf:"bytes,36,opt,name=istioOwnedCNIConfigFileName,proto3" json:"istioOwnedCNIConfigFileName,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *CNIConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CNIConfig) GetHub() string {
	if x != nil {
		return x.Hub
	}
	return ""
}

func (x *CNIConfig) GetTag() *structpb.Value {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *CNIConfig) GetVariant() string {
	if x != nil {
		return x.Variant
	}
	return ""
}

func (x *CNIConfig) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CNIConfig) GetPullPolicy() string {
	if x != nil {
		return x.PullPolicy
	}
	return ""
}

func (x *CNIConfig) GetCniBinDir() string {
	if x != nil {
		return x.CniBinDir
	}
	return ""
}

func (x *CNIConfig) GetCniConfDir() string {
	if x != nil {
		return x.CniConfDir
	}
	return ""
}

func (x *CNIConfig) GetCniConfFileName() string {
	if x != nil {
		return x.CniConfFileName
	}
	return ""
}

func (x *CNIConfig) GetCniNetnsDir() string {
	if x != nil {
		return x.CniNetnsDir
	}
	return ""
}

func (x *CNIConfig) GetExcludeNamespaces() []string {
	if x != nil {
		return x.ExcludeNamespaces
	}
	return nil
}

func (x *CNIConfig) GetAffinity() *v1.Affinity {
	if x != nil {
		return x.Affinity
	}
	return nil
}

func (x *CNIConfig) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *CNIConfig) GetDaemonSetLabels() map[string]string {
	if x != nil {
		return x.DaemonSetLabels
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *CNIConfig) GetPodAnnotations() map[string]string {
	if x != nil {
		return x.PodAnnotations
	}
	return nil
}

func (x *CNIConfig) GetPodLabels() map[string]string {
	if x != nil {
		return x.PodLabels
	}
	return nil
}

func (x *CNIConfig) GetPspClusterRole() string {
	if x != nil {
		return x.PspClusterRole
	}
	return ""
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *CNIConfig) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

func (x *CNIConfig) GetLogging() *GlobalLoggingConfig {
	if x != nil {
		return x.Logging
	}
	return nil
}

func (x *CNIConfig) GetRepair() *CNIRepairConfig {
	if x != nil {
		return x.Repair
	}
	return nil
}

func (x *CNIConfig) GetChained() bool {
	if x != nil {
		return x.Chained
	}
	return false
}

func (x *CNIConfig) GetResourceQuotas() *ResourceQuotas {
	if x != nil {
		return x.ResourceQuotas
	}
	return nil
}

func (x *CNIConfig) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *CNIConfig) GetPrivileged() bool {
	if x != nil {
		return x.Privileged
	}
	return false
}

func (x *CNIConfig) GetSeccompProfile() *v1.SeccompProfile {
	if x != nil {
		return x.SeccompProfile
	}
	return nil
}

func (x *CNIConfig) GetAmbient() *CNIAmbientConfig {
	if x != nil {
		return x.Ambient
	}
	return nil
}

func (x *CNIConfig) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *CNIConfig) GetRollingMaxUnavailable() *IntOrString {
	if x != nil {
		return x.RollingMaxUnavailable
	}
	return nil
}

func (x *CNIConfig) GetIstioOwnedCNIConfig() bool {
	if x != nil {
		return x.IstioOwnedCNIConfig
	}
	return false
}

func (x *CNIConfig) GetIstioOwnedCNIConfigFileName() string {
	if x != nil {
		return x.IstioOwnedCNIConfigFileName
	}
	return ""
}

type CNIUsageConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Controls whether CNI should be used.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	Chained bool `protobuf:"varint,2,opt,name=chained,proto3" json:"chained,omitempty"`
	// Specifies the CNI provider. Can be either "default" or "multus". When set to "multus", an annotation
	// `k8s.v1.cni.cncf.io/networks` is set on injected pods to point to a NetworkAttachmentDefinition
	Provider      string `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CNIUsageConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *CNIUsageConfig) GetChained() bool {
	if x != nil {
		return x.Chained
	}
	return false
}

func (x *CNIUsageConfig) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type CNIAmbientConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Controls whether ambient redirection is enabled
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The directory path containing the configuration files for Ambient. Defaults to /etc/ambient-config.
	ConfigDir string `protobuf:"bytes,3,opt,name=configDir,proto3" json:"configDir,omitempty"`
	// If enabled, and ambient is enabled, DNS redirection will be enabled.
	DnsCapture bool `protobuf:"varint,5,opt,name=dnsCapture,proto3" json:"dnsCapture,omitempty"`
	// UNSTABLE: If enabled, and ambient is enabled, enables ipv6 support
	Ipv6 bool `protobuf:"varint,7,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	// If enabled, and ambient is enabled, iptables reconciliation will be enabled.
	ReconcileIptablesOnStartup bool `protobuf:"varint,9,opt,name=reconcileIptablesOnStartup,proto3" json:"reconcileIptablesOnStartup,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *CNIAmbientConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CNIAmbientConfig) GetConfigDir() string {
	if x != nil {
		return x.ConfigDir
	}
	return ""
}

func (x *CNIAmbientConfig) GetDnsCapture() bool {
	if x != nil {
		return x.DnsCapture
	}
	return false
}

func (x *CNIAmbientConfig) GetIpv6() bool {
	if x != nil {
		return x.Ipv6
	}
	return false
}

func (x *CNIAmbientConfig) GetReconcileIptablesOnStartup() bool {
	if x != nil {
		return x.ReconcileIptablesOnStartup
	}
	return false
}

type CNIRepairConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Controls whether repair behavior is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Hub to pull the container image from. Image will be `Hub/Image:Tag-Variant`.
	Hub string `protobuf:"bytes,2,opt,name=hub,proto3" json:"hub,omitempty"`
	// The container image tag to pull. Image will be `Hub/Image:Tag-Variant`.
	Tag *structpb.Value `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	// Image name to pull from. Image will be `Hub/Image:Tag-Variant`.
	// If Image contains a "/", it will replace the entire `image` in the pod.
	Image string `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	// The Repair controller has 3 modes (labelPods, deletePods, and repairPods). Pick which one meets your use cases. Note only one may be used.
	// The mode defines the action the controller will take when a pod is detected as broken.
	// If labelPods is true, the controller will label all broken pods with <brokenPodLabelKey>=<brokenPodLabelValue>.
	// This is only capable of identifying broken pods; the user is responsible for fixing them (generally, by deleting them).
	// Note this gives the DaemonSet a relatively high privilege, as modifying pod metadata/status can have wider impacts.
	LabelPods bool `protobuf:"varint,5,opt,name=labelPods,proto3" json:"labelPods,omitempty"`
	// The Repair controller has 3 modes (labelPods, deletePods, and repairPods). Pick which one meets your use cases. Note only one may be used.
	// The mode defines the action the controller will take when a pod is detected as broken.
	// If repairPods is true, the controller will dynamically repair any broken pod by setting up the pod networking configuration even after it has started.
	// Note the pod will be crashlooping, so this may take a few minutes to become fully functional based on when the retry occurs.
	// This requires no RBAC privilege, but will require the CNI agent to run as a privileged pod.
	RepairPods bool `protobuf:"varint,11,opt,name=repairPods,proto3" json:"repairPods,omitempty"`
	// No longer used.
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	CreateEvents string `protobuf:"bytes,6,opt,name=createEvents,proto3" json:"createEvents,omitempty"`
	// The Repair controller has 3 modes (labelPods, deletePods, and repairPods). Pick which one meets your use cases. Note only one may be used.
	// The mode defines the action the controller will take when a pod is detected as broken.
	// If deletePods is true, the controller will delete the broken pod. The pod will then be rescheduled, hopefully onto a node that is fully ready.
	// Note this gives the DaemonSet a relatively high privilege, as it can delete any Pod.
	DeletePods bool `protobuf:"varint,7,opt,name=deletePods,proto3" json:"deletePods,omitempty"`
	// The label key to apply to a broken pod when the controller is in labelPods mode.
	BrokenPodLabelKey string `protobuf:"bytes,8,opt,name=brokenPodLabelKey,proto3" json:"brokenPodLabelKey,omitempty"`
	// The label value to apply to a broken pod when the controller is in labelPods mode.
	BrokenPodLabelValue string `protobuf:"bytes,9,opt,name=brokenPodLabelValue,proto3" json:"brokenPodLabelValue,omitempty"`
	// The name of the init container to use for the repairPods mode.
	InitContainerName string `protobuf:"bytes,10,opt,name=initContainerName,proto3" json:"initContainerName,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CNIRepairConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CNIRepairConfig) GetHub() string {
	if x != nil {
		return x.Hub
	}
	return ""
}

func (x *CNIRepairConfig) GetTag() *structpb.Value {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *CNIRepairConfig) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CNIRepairConfig) GetLabelPods() bool {
	if x != nil {
		return x.LabelPods
	}
	return false
}

func (x *CNIRepairConfig) GetRepairPods() bool {
	if x != nil {
		return x.RepairPods
	}
	return false
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *CNIRepairConfig) GetCreateEvents() string {
	if x != nil {
		return x.CreateEvents
	}
	return ""
}

func (x *CNIRepairConfig) GetDeletePods() bool {
	if x != nil {
		return x.DeletePods
	}
	return false
}

func (x *CNIRepairConfig) GetBrokenPodLabelKey() string {
	if x != nil {
		return x.BrokenPodLabelKey
	}
	return ""
}

func (x *CNIRepairConfig) GetBrokenPodLabelValue() string {
	if x != nil {
		return x.BrokenPodLabelValue
	}
	return ""
}

func (x *CNIRepairConfig) GetInitContainerName() string {
	if x != nil {
		return x.InitContainerName
	}
	return ""
}

// Configuration for the resource quotas for the CNI DaemonSet.
type ResourceQuotas struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Controls whether to create resource quotas or not for the CNI DaemonSet.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The hard limit on the number of pods in the namespace where the CNI DaemonSet is deployed.
	Pods          int64 `protobuf:"varint,2,opt,name=pods,proto3" json:"pods,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceQuotas) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ResourceQuotas) GetPods() int64 {
	if x != nil {
		return x.Pods
	}
	return 0
}

// Configuration for CPU or memory target utilization for HorizontalPodAutoscaler target.
type TargetUtilizationConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// K8s utilization setting for HorizontalPodAutoscaler target.
	//
	// See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
	TargetAverageUtilization int32 `protobuf:"varint,1,opt,name=targetAverageUtilization,proto3" json:"targetAverageUtilization,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *TargetUtilizationConfig) GetTargetAverageUtilization() int32 {
	if x != nil {
		return x.TargetAverageUtilization
	}
	return 0
}

// Compute resources required by a container.
type Resources struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits map[string]string `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The minimum amount of compute resources required. If Requests is omitted for a container,
	// it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests      map[string]string `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Resources) GetLimits() map[string]string {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *Resources) GetRequests() map[string]string {
	if x != nil {
		return x.Requests
	}
	return nil
}

// Mirrors ServiceAccount for unmarshaling.
type ServiceAccount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Annotations   map[string]string      `protobuf:"bytes,1,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceAccount) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// DefaultPodDisruptionBudgetConfig specifies the default pod disruption budget configuration.
//
// See https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
type DefaultPodDisruptionBudgetConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Controls whether a PodDisruptionBudget with a default minAvailable value of 1 is created for each deployment.
	Enabled       bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DefaultPodDisruptionBudgetConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// DefaultResourcesConfig specifies the default k8s resources settings for all Istio control plane components.
type DefaultResourcesConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// k8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Requests      *ResourcesRequestsConfig `protobuf:"bytes,1,opt,name=requests,proto3" json:"requests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DefaultResourcesConfig) GetRequests() *ResourcesRequestsConfig {
	if x != nil {
		return x.Requests
	}
	return nil
}

// Configuration for an egress gateway.
type EgressGatewayConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Controls whether auto scaling with a HorizontalPodAutoscaler is enabled.
	AutoscaleEnabled bool `protobuf:"varint,1,opt,name=autoscaleEnabled,proto3" json:"autoscaleEnabled,omitempty"`
	// maxReplicas setting for HorizontalPodAutoscaler.
	AutoscaleMax uint32 `protobuf:"varint,2,opt,name=autoscaleMax,proto3" json:"autoscaleMax,omitempty"`
	// minReplicas setting for HorizontalPodAutoscaler.
	AutoscaleMin uint32 `protobuf:"varint,3,opt,name=autoscaleMin,proto3" json:"autoscaleMin,omitempty"`
	// K8s memory utilization setting for HorizontalPodAutoscaler target.
	//
	// See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	Memory *TargetUtilizationConfig `protobuf:"bytes,4,opt,name=memory,proto3" json:"memory,omitempty"`
	// K8s utilization setting for HorizontalPodAutoscaler target.
	//
	// See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	Cpu           *TargetUtilizationConfig `protobuf:"bytes,5,opt,name=cpu,proto3" json:"cpu,omitempty"`
	CustomService bool                     `protobuf:"varint,6,opt,name=customService,proto3" json:"customService,omitempty"`
	// Controls whether an egress gateway is enabled.
	Enabled bool `protobuf:"varint,7,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Environment variables passed to the proxy container.
	Env    map[string]string `protobuf:"bytes,8,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Labels map[string]string `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name   string            `protobuf:"bytes,25,opt,name=name,proto3" json:"name,omitempty"`
	// K8s node selector.
	//
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	NodeSelector map[string]string `protobuf:"bytes,10,rep,name=nodeSelector,proto3" json:"nodeSelector,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// K8s annotations for pods.
	//
	// See: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	PodAnnotations map[string]string `protobuf:"bytes,11,rep,name=podAnnotations,proto3" json:"podAnnotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Pod anti-affinity label selector.
	//
	// Specify the pod anti-affinity that allows you to constrain which nodes
	// your pod is eligible to be scheduled based on labels on pods that are
	// already running on the node rather than based on labels on nodes.
	// There are currently two types of anti-affinity:
	//
	//	"requiredDuringSchedulingIgnoredDuringExecution"
	//	"preferredDuringSchedulingIgnoredDuringExecution"
	//
	// which denote “hard” vs. “soft” requirements, you can define your values
	// in "podAntiAffinityLabelSelector" and "podAntiAffinityTermLabelSelector"
	// correspondingly.
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
	//
	// Examples:
	// podAntiAffinityLabelSelector:
	//   - key: security
	//     operator: In
	//     values: S1,S2
	//     topologyKey: "kubernetes.io/hostname"
	//     This pod anti-affinity rule says that the pod requires not to be scheduled
	//     onto a node if that node is already running a pod with label having key
	//     “security” and value “S1”.
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	PodAntiAffinityLabelSelector []*v11.LabelSelector `protobuf:"bytes,12,rep,name=podAntiAffinityLabelSelector,proto3" json:"podAntiAffinityLabelSelector,omitempty"`
	// See PodAntiAffinityLabelSelector.
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	PodAntiAffinityTermLabelSelector []*v11.LabelSelector `protobuf:"bytes,13,rep,name=podAntiAffinityTermLabelSelector,proto3" json:"podAntiAffinityTermLabelSelector,omitempty"`
	// Ports Configuration for the egress gateway service.
	Ports []*PortsConfig `protobuf:"bytes,14,rep,name=ports,proto3" json:"ports,omitempty"`
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	Resources *Resources `protobuf:"bytes,15,opt,name=resources,proto3" json:"resources,omitempty"`
	// Config for secret volume mounts.
	SecretVolumes []*SecretVolume `protobuf:"bytes,16,rep,name=secretVolumes,proto3" json:"secretVolumes,omitempty"`
	// Annotations to add to the egress gateway service.
	ServiceAnnotations map[string]string `protobuf:"bytes,17,rep,name=serviceAnnotations,proto3" json:"serviceAnnotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Service type.
	//
	// See https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type string `protobuf:"bytes,18,opt,name=type,proto3" json:"type,omitempty"`
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	Tolerations []*v1.Toleration `protobuf:"bytes,20,rep,name=tolerations,proto3" json:"tolerations,omitempty"`
	// K8s rolling update strategy
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	RollingMaxSurge *IntOrString `protobuf:"bytes,21,opt,name=rollingMaxSurge,proto3" json:"rollingMaxSurge,omitempty"`
	// The number of pods that can be unavailable during a rolling update (see
	// `strategy.rollingUpdate.maxUnavailable` here:
	// https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/#DeploymentSpec).
	// May be specified as a number of pods or as a percent of the total number
	// of pods at the start of the update.
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	RollingMaxUnavailable *IntOrString               `protobuf:"bytes,22,opt,name=rollingMaxUnavailable,proto3" json:"rollingMaxUnavailable,omitempty"`
	ConfigVolumes         map[string]*structpb.Value `protobuf:"bytes,23,rep,name=configVolumes,proto3" json:"configVolumes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AdditionalContainers  map[string]*structpb.Value `protobuf:"bytes,24,rep,name=additionalContainers,proto3" json:"additionalContainers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RunAsRoot             bool                       `protobuf:"varint,26,opt,name=runAsRoot,proto3" json:"runAsRoot,omitempty"`
	// The injection template to use for the gateway. If not set, no injection will be performed.
	InjectionTemplate string          `protobuf:"bytes,27,opt,name=injectionTemplate,proto3" json:"injectionTemplate,omitempty"`
	ServiceAccount    *ServiceAccount `protobuf:"bytes,28,opt,name=serviceAccount,proto3" json:"serviceAccount,omitempty"`
	// Defines which IP family to use for single stack or the order of IP families for dual-stack.
	// Valid list items are "IPv4", "IPv6".
	// More info: https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services
	IpFamilies []string `protobuf:"bytes,29,rep,name=ipFamilies,proto3" json:"ipFamilies,omitempty"`
	// Controls whether Services are configured to use IPv4, IPv6, or both. Valid options
	// are PreferDualStack, RequireDualStack, and SingleStack.
	// More info: https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services
	IpFamilyPolicy string `protobuf:"bytes,30,opt,name=ipFamilyPolicy,proto3" json:"ipFamilyPolicy,omitempty"` // Next available 31.
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EgressGatewayConfig) GetAutoscaleEnabled() bool {
	if x != nil {
		return x.AutoscaleEnabled
	}
	return false
}

func (x *EgressGatewayConfig) GetAutoscaleMax() uint32 {
	if x != nil {
		return x.AutoscaleMax
	}
	return 0
}

func (x *EgressGatewayConfig) GetAutoscaleMin() uint32 {
	if x != nil {
		return x.AutoscaleMin
	}
	return 0
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *EgressGatewayConfig) GetMemory() *TargetUtilizationConfig {
	if x != nil {
		return x.Memory
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *EgressGatewayConfig) GetCpu() *TargetUtilizationConfig {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *EgressGatewayConfig) GetCustomService() bool {
	if x != nil {
		return x.CustomService
	}
	return false
}

func (x *EgressGatewayConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *EgressGatewayConfig) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *EgressGatewayConfig) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *EgressGatewayConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *EgressGatewayConfig) GetNodeSelector() map[string]string {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *EgressGatewayConfig) GetPodAnnotations() map[string]string {
	if x != nil {
		return x.PodAnnotations
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *EgressGatewayConfig) GetPodAntiAffinityLabelSelector() []*v11.LabelSelector {
	if x != nil {
		return x.PodAntiAffinityLabelSelector
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *EgressGatewayConfig) GetPodAntiAffinityTermLabelSelector() []*v11.LabelSelector {
	if x != nil {
		return x.PodAntiAffinityTermLabelSelector
	}
	return nil
}

func (x *EgressGatewayConfig) GetPorts() []*PortsConfig {
	if x != nil {
		return x.Ports
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *EgressGatewayConfig) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *EgressGatewayConfig) GetSecretVolumes() []*SecretVolume {
	if x != nil {
		return x.SecretVolumes
	}
	return nil
}

func (x *EgressGatewayConfig) GetServiceAnnotations() map[string]string {
	if x != nil {
		return x.ServiceAnnotations
	}
	return nil
}

func (x *EgressGatewayConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *EgressGatewayConfig) GetTolerations() []*v1.Toleration {
	if x != nil {
		return x.Tolerations
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *EgressGatewayConfig) GetRollingMaxSurge() *IntOrString {
	if x != nil {
		return x.RollingMaxSurge
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *EgressGatewayConfig) GetRollingMaxUnavailable() *IntOrString {
	if x != nil {
		return x.RollingMaxUnavailable
	}
	return nil
}

func (x *EgressGatewayConfig) GetConfigVolumes() map[string]*structpb.Value {
	if x != nil {
		return x.ConfigVolumes
	}
	return nil
}

func (x *EgressGatewayConfig) GetAdditionalContainers() map[string]*structpb.Value {
	if x != nil {
		return x.AdditionalContainers
	}
	return nil
}

func (x *EgressGatewayConfig) GetRunAsRoot() bool {
	if x != nil {
		return x.RunAsRoot
	}
	return false
}

func (x *EgressGatewayConfig) GetInjectionTemplate() string {
	if x != nil {
		return x.InjectionTemplate
	}
	return ""
}

func (x *EgressGatewayConfig) GetServiceAccount() *ServiceAccount {
	if x != nil {
		return x.ServiceAccount
	}
	return nil
}

func (x *EgressGatewayConfig) GetIpFamilies() []string {
	if x != nil {
		return x.IpFamilies
	}
	return nil
}

func (x *EgressGatewayConfig) GetIpFamilyPolicy() string {
	if x != nil {
		return x.IpFamilyPolicy
	}
	return ""
}

// Configuration for gateways.
type GatewaysConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for an egress gateway.
	IstioEgressgateway *EgressGatewayConfig `protobuf:"bytes,1,opt,name=istio_egressgateway,json=istio-egressgateway,proto3" json:"istio_egressgateway,omitempty"`
	// Controls whether any gateways are enabled.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Configuration for an ingress gateway.
	IstioIngressgateway *IngressGatewayConfig `protobuf:"bytes,4,opt,name=istio_ingressgateway,json=istio-ingressgateway,proto3" json:"istio_ingressgateway,omitempty"`
	SecurityContext     *structpb.Value       `protobuf:"bytes,10,opt,name=securityContext,proto3" json:"securityContext,omitempty"`
	SeccompProfile      *structpb.Value       `protobuf:"bytes,12,opt,name=seccompProfile,proto3" json:"seccompProfile,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GatewaysConfig) GetIstioEgressgateway() *EgressGatewayConfig {
	if x != nil {
		return x.IstioEgressgateway
	}
	return nil
}

func (x *GatewaysConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GatewaysConfig) GetIstioIngressgateway() *IngressGatewayConfig {
	if x != nil {
		return x.IstioIngressgateway
	}
	return nil
}

func (x *GatewaysConfig) GetSecurityContext() *structpb.Value {
	if x != nil {
		return x.SecurityContext
	}
	return nil
}

func (x *GatewaysConfig) GetSeccompProfile() *structpb.Value {
	if x != nil {
		return x.SeccompProfile
	}
	return nil
}

// Global Configuration for Istio components.
type GlobalConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies pod scheduling arch(amd64, ppc64le, s390x, arm64) and weight as follows:
	//
	//	0 - Never scheduled
	//	1 - Least preferred
	//	2 - No preference
	//	3 - Most preferred
	//
	// Deprecated: replaced by the affinity k8s settings which allows architecture nodeAffinity configuration of this behavior.
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	Arch *ArchConfig `protobuf:"bytes,1,opt,name=arch,proto3" json:"arch,omitempty"`
	// List of certSigners to allow "approve" action in the ClusterRole
	CertSigners []string `protobuf:"bytes,68,rep,name=certSigners,proto3" json:"certSigners,omitempty"`
	// Controls whether the server-side validation is enabled.
	ConfigValidation bool `protobuf:"varint,3,opt,name=configValidation,proto3" json:"configValidation,omitempty"`
	// Default k8s node selector for all the Istio control plane components
	//
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	DefaultNodeSelector map[string]string `protobuf:"bytes,6,rep,name=defaultNodeSelector,proto3" json:"defaultNodeSelector,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Specifies the default pod disruption budget configuration.
	DefaultPodDisruptionBudget *DefaultPodDisruptionBudgetConfig `protobuf:"bytes,7,opt,name=defaultPodDisruptionBudget,proto3" json:"defaultPodDisruptionBudget,omitempty"`
	// Default k8s resources settings for all Istio control plane components.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	DefaultResources *DefaultResourcesConfig `protobuf:"bytes,9,opt,name=defaultResources,proto3" json:"defaultResources,omitempty"`
	// Default node tolerations to be applied to all deployments so that all pods can be
	// scheduled to nodes with matching taints. Each component can overwrite
	// these default values by adding its tolerations block in the relevant section below
	// and setting the desired values.
	// Configure this field in case that all pods of Istio control plane are expected to
	// be scheduled to particular nodes with specified taints.
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	DefaultTolerations []*v1.Toleration `protobuf:"bytes,55,rep,name=defaultTolerations,proto3" json:"defaultTolerations,omitempty"`
	// Specifies the docker hub for Istio images.
	Hub string `protobuf:"bytes,12,opt,name=hub,proto3" json:"hub,omitempty"`
	// Specifies the image pull policy for the Istio images. one of Always, Never, IfNotPresent.
	// Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated.
	//
	// More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy string `protobuf:"bytes,13,opt,name=imagePullPolicy,proto3" json:"imagePullPolicy,omitempty"`
	// ImagePullSecrets for the control plane ServiceAccount, list of secrets in the same namespace
	// to use for pulling any images in pods that reference this ServiceAccount.
	// Must be set for any cluster configured with private docker registry.
	ImagePullSecrets []string `protobuf:"bytes,37,rep,name=imagePullSecrets,proto3" json:"imagePullSecrets,omitempty"`
	// Specifies the default namespace for the Istio control plane components.
	IstioNamespace string `protobuf:"bytes,14,opt,name=istioNamespace,proto3" json:"istioNamespace,omitempty"`
	// Specifies whether istio components should output logs in json format by adding --log_as_json argument to each container.
	LogAsJson bool `protobuf:"varint,36,opt,name=logAsJson,proto3" json:"logAsJson,omitempty"`
	// Specifies the global logging level settings for the Istio control plane components.
	Logging *GlobalLoggingConfig `protobuf:"bytes,17,opt,name=logging,proto3" json:"logging,omitempty"`
	// The Mesh Identifier. It should be unique within the scope where
	// meshes will interact with each other, but it is not required to be
	// globally/universally unique. For example, if any of the following are true,
	// then two meshes must have different Mesh IDs:
	// - Meshes will have their telemetry aggregated in one place
	// - Meshes will be federated together
	// - Policy will be written referencing one mesh from the other
	//
	// If an administrator expects that any of these conditions may become true in
	// the future, they should ensure their meshes have different Mesh IDs
	// assigned.
	//
	// Within a multicluster mesh, each cluster must be (manually or auto)
	// configured to have the same Mesh ID value. If an existing cluster 'joins' a
	// multicluster mesh, it will need to be migrated to the new mesh ID. Details
	// of migration TBD, and it may be a disruptive operation to change the Mesh
	// ID post-install.
	//
	// If the mesh admin does not specify a value, Istio will use the value of the
	// mesh's Trust Domain. The best practice is to select a proper Trust Domain
	// value.
	MeshID string `protobuf:"bytes,53,opt,name=meshID,proto3" json:"meshID,omitempty"`
	// Configure the mesh networks to be used by the Split Horizon EDS.
	//
	// The following example defines two networks with different endpoints association methods.
	// For `network1` all endpoints that their IP belongs to the provided CIDR range will be
	// mapped to network1. The gateway for this network example is specified by its public IP
	// address and port.
	// The second network, `network2`, in this example is defined differently with all endpoints
	// retrieved through the specified Multi-Cluster registry being mapped to network2. The
	// gateway is also defined differently with the name of the gateway service on the remote
	// cluster. The public IP for the gateway will be determined from that remote service (only
	// LoadBalancer gateway service type is currently supported, for a NodePort type gateway service,
	// it still need to be configured manually).
	//
	// meshNetworks:
	//
	//	network1:
	//	  endpoints:
	//	  - fromCidr: "192.168.0.1/24"
	//	  gateways:
	//	  - address: 1.1.1.1
	//	    port: 80
	//	network2:
	//	  endpoints:
	//	  - fromRegistry: reg1
	//	  gateways:
	//	  - registryServiceName: istio-ingressgateway.istio-system.svc.cluster.local
	//	    port: 443
	MeshNetworks map[string]*structpb.Value `protobuf:"bytes,19,rep,name=meshNetworks,proto3" json:"meshNetworks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Specifies the Configuration for Istio mesh across multiple clusters through Istio gateways.
	MultiCluster *MultiClusterConfig `protobuf:"bytes,22,opt,name=multiCluster,proto3" json:"multiCluster,omitempty"`
	// Network defines the network this cluster belong to. This name
	// corresponds to the networks in the map of mesh networks.
	Network string `protobuf:"bytes,39,opt,name=network,proto3" json:"network,omitempty"`
	// Custom DNS config for the pod to resolve names of services in other
	// clusters. Use this to add additional search domains, and other settings.
	// see https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#dns-config
	// This does not apply to gateway pods as they typically need a different
	// set of DNS settings than the normal application pods (e.g. in multicluster scenarios).
	PodDNSSearchNamespaces []string `protobuf:"bytes,43,rep,name=podDNSSearchNamespaces,proto3" json:"podDNSSearchNamespaces,omitempty"`
	// Controls whether the creation of the sidecar injector ConfigMap should be skipped.
	// Defaults to false. When set to true, the sidecar injector ConfigMap will not be created.
	OmitSidecarInjectorConfigMap bool `protobuf:"varint,38,opt,name=omitSidecarInjectorConfigMap,proto3" json:"omitSidecarInjectorConfigMap,omitempty"`
	// Controls whether the WebhookConfiguration resource(s) should be created. The current behavior
	// of Istiod is to manage its own webhook configurations.
	// When this option is set to true, Istio Operator, instead of webhooks, manages the
	// webhook configurations. When this option is set as false, webhooks manage their
	// own webhook configurations.
	OperatorManageWebhooks bool `protobuf:"varint,41,opt,name=operatorManageWebhooks,proto3" json:"operatorManageWebhooks,omitempty"`
	// Specifies the k8s priorityClassName for the istio control plane components.
	//
	// See https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	PriorityClassName string `protobuf:"bytes,27,opt,name=priorityClassName,proto3" json:"priorityClassName,omitempty"`
	// Specifies how proxies are configured within Istio.
	Proxy *ProxyConfig `protobuf:"bytes,28,opt,name=proxy,proto3" json:"proxy,omitempty"`
	// Specifies the Configuration for proxy_init container which sets the pods' networking to intercept the inbound/outbound traffic.
	ProxyInit *ProxyInitConfig `protobuf:"bytes,29,opt,name=proxy_init,proto3" json:"proxy_init,omitempty"`
	// Specifies the Configuration for the SecretDiscoveryService instead of using K8S secrets to mount the certificates.
	Sds *SDSConfig `protobuf:"bytes,30,opt,name=sds,proto3" json:"sds,omitempty"`
	// Specifies the tag for the Istio docker images.
	Tag *structpb.Value `protobuf:"bytes,31,opt,name=tag,proto3" json:"tag,omitempty"`
	// The variant of the Istio container images to use. Options are "debug" or "distroless". Unset will use the default for the given version.
	Variant string `protobuf:"bytes,67,opt,name=variant,proto3" json:"variant,omitempty"`
	// Specifies the Configuration for each of the supported tracers.
	Tracer *TracerConfig `protobuf:"bytes,33,opt,name=tracer,proto3" json:"tracer,omitempty"`
	// Specifies the Istio control plane’s pilot Pod IP address or remote cluster DNS resolvable hostname.
	RemotePilotAddress string `protobuf:"bytes,48,opt,name=remotePilotAddress,proto3" json:"remotePilotAddress,omitempty"`
	// Specifies the configution of istiod
	Istiod *IstiodConfig `protobuf:"bytes,54,opt,name=istiod,proto3" json:"istiod,omitempty"`
	// Configure the Pilot certificate provider.
	// Currently, four providers are supported: "kubernetes", "istiod", "custom" and "none".
	PilotCertProvider string `protobuf:"bytes,56,opt,name=pilotCertProvider,proto3" json:"pilotCertProvider,omitempty"`
	// Configure the policy for validating JWT.
	// This is deprecated and has no effect.
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	JwtPolicy string `protobuf:"bytes,57,opt,name=jwtPolicy,proto3" json:"jwtPolicy,omitempty"`
	// Specifies the configuration for Security Token Service.
	Sts *STSConfig `protobuf:"bytes,58,opt,name=sts,proto3" json:"sts,omitempty"`
	// Configures the revision this control plane is a part of
	Revision string `protobuf:"bytes,59,opt,name=revision,proto3" json:"revision,omitempty"`
	// Controls whether the in-cluster MTLS key and certs are loaded from the secret volume mounts.
	MountMtlsCerts bool `protobuf:"varint,60,opt,name=mountMtlsCerts,proto3" json:"mountMtlsCerts,omitempty"`
	// The address of the CA for CSR.
	CaAddress string `protobuf:"bytes,61,opt,name=caAddress,proto3" json:"caAddress,omitempty"`
	// Controls whether one external istiod is enabled.
	ExternalIstiod bool `protobuf:"varint,62,opt,name=externalIstiod,proto3" json:"externalIstiod,omitempty"`
	// Controls whether a remote cluster is the config cluster for an external istiod
	ConfigCluster bool `protobuf:"varint,64,opt,name=configCluster,proto3" json:"configCluster,omitempty"`
	// The name of the CA for workloads.
	// For example, when caName=GkeWorkloadCertificate, GKE workload certificates
	// will be used as the certificates for workloads.
	// The default value is "" and when caName="", the CA will be configured by other
	// mechanisms (e.g., environmental variable CA_PROVIDER).
	CaName string `protobuf:"bytes,65,opt,name=caName,proto3" json:"caName,omitempty"`
	// Platform in which Istio is deployed. Possible values are: "openshift" and "gcp"
	// An empty value means it is a vanilla Kubernetes distribution, therefore no special
	// treatment will be considered.
	Platform string `protobuf:"bytes,69,opt,name=platform,proto3" json:"platform,omitempty"`
	// Defines which IP family to use for single stack or the order of IP families for dual-stack.
	// Valid list items are "IPv4", "IPv6".
	// More info: https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services
	IpFamilies []string `protobuf:"bytes,70,rep,name=ipFamilies,proto3" json:"ipFamilies,omitempty"`
	// Controls whether Services are configured to use IPv4, IPv6, or both. Valid options
	// are PreferDualStack, RequireDualStack, and SingleStack.
	// More info: https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services
	IpFamilyPolicy string `protobuf:"bytes,71,opt,name=ipFamilyPolicy,proto3" json:"ipFamilyPolicy,omitempty"`
	// Specifies how waypoints are configured within Istio.
	Waypoint *WaypointConfig `protobuf:"bytes,72,opt,name=waypoint,proto3" json:"waypoint,omitempty"`
	// Select a custom name for istiod's CA Root Cert ConfigMap.
	TrustBundleName string `protobuf:"bytes,73,opt,name=trustBundleName,proto3" json:"trustBundleName,omitempty"`
	// Specifies whether native nftables rules should be used instead of iptables rules for traffic redirection.
	NativeNftables bool `protobuf:"varint,74,opt,name=nativeNftables,proto3" json:"nativeNftables,omitempty"`
	// Settings related to Kubernetes NetworkPolicy.
	NetworkPolicy *NetworkPolicyConfig `protobuf:"bytes,75,opt,name=networkPolicy,proto3" json:"networkPolicy,omitempty"`
	// Specifies resource scope for discovery selectors.
	// This is useful when installing Istio on a cluster where some resources need to be owned by a cluster administrator and some can be owned by the mesh administrator.
	ResourceScope ResourceScope `protobuf:"varint,76,opt,name=resourceScope,proto3,enum=istio.operator.v1alpha1.ResourceScope" json:"resourceScope,omitempty"` // The next available key is 77
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *GlobalConfig) GetArch() *ArchConfig {
	if x != nil {
		return x.Arch
	}
	return nil
}

func (x *GlobalConfig) GetCertSigners() []string {
	if x != nil {
		return x.CertSigners
	}
	return nil
}

func (x *GlobalConfig) GetConfigValidation() bool {
	if x != nil {
		return x.ConfigValidation
	}
	return false
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *GlobalConfig) GetDefaultNodeSelector() map[string]string {
	if x != nil {
		return x.DefaultNodeSelector
	}
	return nil
}

func (x *GlobalConfig) GetDefaultPodDisruptionBudget() *DefaultPodDisruptionBudgetConfig {
	if x != nil {
		return x.DefaultPodDisruptionBudget
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *GlobalConfig) GetDefaultResources() *DefaultResourcesConfig {
	if x != nil {
		return x.DefaultResources
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *GlobalConfig) GetDefaultTolerations() []*v1.Toleration {
	if x != nil {
		return x.DefaultTolerations
	}
	return nil
}

func (x *GlobalConfig) GetHub() string {
	if x != nil {
		return x.Hub
	}
	return ""
}

func (x *GlobalConfig) GetImagePullPolicy() string {
	if x != nil {
		return x.ImagePullPolicy
	}
	return ""
}

func (x *GlobalConfig) GetImagePullSecrets() []string {
	if x != nil {
		return x.ImagePullSecrets
	}
	return nil
}

func (x *GlobalConfig) GetIstioNamespace() string {
	if x != nil {
		return x.IstioNamespace
	}
	return ""
}

func (x *GlobalConfig) GetLogAsJson() bool {
	if x != nil {
		return x.LogAsJson
	}
	return false
}

func (x *GlobalConfig) GetLogging() *GlobalLoggingConfig {
	if x != nil {
		return x.Logging
	}
	return nil
}

func (x *GlobalConfig) GetMeshID() string {
	if x != nil {
		return x.MeshID
	}
	return ""
}

func (x *GlobalConfig) GetMeshNetworks() map[string]*structpb.Value {
	if x != nil {
		return x.MeshNetworks
	}
	return nil
}

func (x *GlobalConfig) GetMultiCluster() *MultiClusterConfig {
	if x != nil {
		return x.MultiCluster
	}
	return nil
}

func (x *GlobalConfig) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *GlobalConfig) GetPodDNSSearchNamespaces() []string {
	if x != nil {
		return x.PodDNSSearchNamespaces
	}
	return nil
}

func (x *GlobalConfig) GetOmitSidecarInjectorConfigMap() bool {
	if x != nil {
		return x.OmitSidecarInjectorConfigMap
	}
	return false
}

func (x *GlobalConfig) GetOperatorManageWebhooks() bool {
	if x != nil {
		return x.OperatorManageWebhooks
	}
	return false
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *GlobalConfig) GetPriorityClassName() string {
	if x != nil {
		return x.PriorityClassName
	}
	return ""
}

func (x *GlobalConfig) GetProxy() *ProxyConfig {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *GlobalConfig) GetProxyInit() *ProxyInitConfig {
	if x != nil {
		return x.ProxyInit
	}
	return nil
}

func (x *GlobalConfig) GetSds() *SDSConfig {
	if x != nil {
		return x.Sds
	}
	return nil
}

func (x *GlobalConfig) GetTag() *structpb.Value {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *GlobalConfig) GetVariant() string {
	if x != nil {
		return x.Variant
	}
	return ""
}

func (x *GlobalConfig) GetTracer() *TracerConfig {
	if x != nil {
		return x.Tracer
	}
	return nil
}

func (x *GlobalConfig) GetRemotePilotAddress() string {
	if x != nil {
		return x.RemotePilotAddress
	}
	return ""
}

func (x *GlobalConfig) GetIstiod() *IstiodConfig {
	if x != nil {
		return x.Istiod
	}
	return nil
}

func (x *GlobalConfig) GetPilotCertProvider() string {
	if x != nil {
		return x.PilotCertProvider
	}
	return ""
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *GlobalConfig) GetJwtPolicy() string {
	if x != nil {
		return x.JwtPolicy
	}
	return ""
}

func (x *GlobalConfig) GetSts() *STSConfig {
	if x != nil {
		return x.Sts
	}
	return nil
}

func (x *GlobalConfig) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *GlobalConfig) GetMountMtlsCerts() bool {
	if x != nil {
		return x.MountMtlsCerts
	}
	return false
}

func (x *GlobalConfig) GetCaAddress() string {
	if x != nil {
		return x.CaAddress
	}
	return ""
}

func (x *GlobalConfig) GetExternalIstiod() bool {
	if x != nil {
		return x.ExternalIstiod
	}
	return false
}

func (x *GlobalConfig) GetConfigCluster() bool {
	if x != nil {
		return x.ConfigCluster
	}
	return false
}

func (x *GlobalConfig) GetCaName() string {
	if x != nil {
		return x.CaName
	}
	return ""
}

func (x *GlobalConfig) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *GlobalConfig) GetIpFamilies() []string {
	if x != nil {
		return x.IpFamilies
	}
	return nil
}

func (x *GlobalConfig) GetIpFamilyPolicy() string {
	if x != nil {
		return x.IpFamilyPolicy
	}
	return ""
}

func (x *GlobalConfig) GetWaypoint() *WaypointConfig {
	if x != nil {
		return x.Waypoint
	}
	return nil
}

func (x *GlobalConfig) GetTrustBundleName() string {
	if x != nil {
		return x.TrustBundleName
	}
	return ""
}

func (x *GlobalConfig) GetNativeNftables() bool {
	if x != nil {
		return x.NativeNftables
	}
	return false
}

func (x *GlobalConfig) GetNetworkPolicy() *NetworkPolicyConfig {
	if x != nil {
		return x.NetworkPolicy
	}
	return nil
}

func (x *GlobalConfig) GetResourceScope() ResourceScope {
	if x != nil {
		return x.ResourceScope
	}
	return ResourceScope_undefined
}

// Configuration for Security Token Service (STS) server.
//
// See https://tools.ietf.org/html/draft-ietf-oauth-token-exchange-16
type STSConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServicePort   uint32                 `protobuf:"varint,1,opt,name=servicePort,proto3" json:"servicePort,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *STSConfig) GetServicePort() uint32 {
	if x != nil {
		return x.ServicePort
	}
	return 0
}

type IstiodConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If enabled, istiod will perform config analysis
	EnableAnalysis bool `protobuf:"varint,2,opt,name=enableAnalysis,proto3" json:"enableAnalysis,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *IstiodConfig) GetEnableAnalysis() bool {
	if x != nil {
		return x.EnableAnalysis
	}
	return false
}

// GlobalLoggingConfig specifies the global logging level settings for the Istio control plane components.
type GlobalLoggingConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Comma-separated minimum per-scope logging level of messages to output, in the form of <scope>:<level>,<scope>:<level>
	// The control plane has different scopes depending on component, but can configure default log level across all components
	// If empty, default scope and level will be used as configured in code
	Level         string `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GlobalLoggingConfig) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

// Configuration for an ingress gateway.
type IngressGatewayConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Controls whether auto scaling with a HorizontalPodAutoscaler is enabled.
	AutoscaleEnabled bool `protobuf:"varint,1,opt,name=autoscaleEnabled,proto3" json:"autoscaleEnabled,omitempty"`
	// maxReplicas setting for HorizontalPodAutoscaler.
	AutoscaleMax uint32 `protobuf:"varint,2,opt,name=autoscaleMax,proto3" json:"autoscaleMax,omitempty"`
	// minReplicas setting for HorizontalPodAutoscaler.
	AutoscaleMin uint32 `protobuf:"varint,3,opt,name=autoscaleMin,proto3" json:"autoscaleMin,omitempty"`
	// K8s memory utilization setting for HorizontalPodAutoscaler target.
	//
	// See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	Memory *TargetUtilizationConfig `protobuf:"bytes,4,opt,name=memory,proto3" json:"memory,omitempty"`
	// K8s cpu utilization setting for HorizontalPodAutoscaler target.
	//
	// See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	Cpu           *TargetUtilizationConfig `protobuf:"bytes,5,opt,name=cpu,proto3" json:"cpu,omitempty"`
	CustomService bool                     `protobuf:"varint,6,opt,name=customService,proto3" json:"customService,omitempty"`
	// Controls whether an ingress gateway is enabled.
	Enabled bool `protobuf:"varint,10,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Environment variables passed to the proxy container.
	Env                      map[string]string `protobuf:"bytes,11,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Labels                   map[string]string `protobuf:"bytes,15,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LoadBalancerIP           string            `protobuf:"bytes,16,opt,name=loadBalancerIP,proto3" json:"loadBalancerIP,omitempty"`
	LoadBalancerSourceRanges []string          `protobuf:"bytes,17,rep,name=loadBalancerSourceRanges,proto3" json:"loadBalancerSourceRanges,omitempty"`
	Name                     string            `protobuf:"bytes,44,opt,name=name,proto3" json:"name,omitempty"`
	// K8s node selector.
	//
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	NodeSelector map[string]string `protobuf:"bytes,19,rep,name=nodeSelector,proto3" json:"nodeSelector,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// K8s annotations for pods.
	//
	// See: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	PodAnnotations map[string]string `protobuf:"bytes,20,rep,name=podAnnotations,proto3" json:"podAnnotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// See EgressGatewayConfig.
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	PodAntiAffinityLabelSelector []*v11.LabelSelector `protobuf:"bytes,21,rep,name=podAntiAffinityLabelSelector,proto3" json:"podAntiAffinityLabelSelector,omitempty"`
	// See EgressGatewayConfig.
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	PodAntiAffinityTermLabelSelector []*v11.LabelSelector `protobuf:"bytes,22,rep,name=podAntiAffinityTermLabelSelector,proto3" json:"podAntiAffinityTermLabelSelector,omitempty"`
	// Port Configuration for the ingress gateway.
	Ports []*PortsConfig `protobuf:"bytes,23,rep,name=ports,proto3" json:"ports,omitempty"`
	// Number of replicas for the ingress gateway Deployment.
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	ReplicaCount uint32 `protobuf:"varint,24,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"`
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	Resources map[string]string `protobuf:"bytes,25,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Config for secret volume mounts.
	SecretVolumes []*SecretVolume `protobuf:"bytes,27,rep,name=secretVolumes,proto3" json:"secretVolumes,omitempty"`
	// Annotations to add to the egress gateway service.
	ServiceAnnotations map[string]string `protobuf:"bytes,28,rep,name=serviceAnnotations,proto3" json:"serviceAnnotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Service type.
	//
	// See https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type string `protobuf:"bytes,29,opt,name=type,proto3" json:"type,omitempty"`
	// K8s rolling update strategy
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	RollingMaxSurge *IntOrString `protobuf:"bytes,31,opt,name=rollingMaxSurge,proto3" json:"rollingMaxSurge,omitempty"`
	// The number of pods that can be unavailable during a rolling update (see
	// `strategy.rollingUpdate.maxUnavailable` here:
	// https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/#DeploymentSpec).
	// May be specified as a number of pods or as a percent of the total number
	// of pods at the start of the update.
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	RollingMaxUnavailable *IntOrString `protobuf:"bytes,32,opt,name=rollingMaxUnavailable,proto3" json:"rollingMaxUnavailable,omitempty"`
	ExternalTrafficPolicy string       `protobuf:"bytes,34,opt,name=externalTrafficPolicy,proto3" json:"externalTrafficPolicy,omitempty"`
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	Tolerations          []*v1.Toleration           `protobuf:"bytes,35,rep,name=tolerations,proto3" json:"tolerations,omitempty"`
	IngressPorts         map[string]*structpb.Value `protobuf:"bytes,36,rep,name=ingressPorts,proto3" json:"ingressPorts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AdditionalContainers map[string]*structpb.Value `protobuf:"bytes,37,rep,name=additionalContainers,proto3" json:"additionalContainers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ConfigVolumes        map[string]*structpb.Value `protobuf:"bytes,38,rep,name=configVolumes,proto3" json:"configVolumes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RunAsRoot            bool                       `protobuf:"varint,45,opt,name=runAsRoot,proto3" json:"runAsRoot,omitempty"`
	// The injection template to use for the gateway. If not set, no injection will be performed.
	InjectionTemplate string          `protobuf:"bytes,46,opt,name=injectionTemplate,proto3" json:"injectionTemplate,omitempty"`
	ServiceAccount    *ServiceAccount `protobuf:"bytes,47,opt,name=serviceAccount,proto3" json:"serviceAccount,omitempty"`
	// Defines which IP family to use for single stack or the order of IP families for dual-stack.
	// Valid list items are "IPv4", "IPv6".
	// More info: https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services
	IpFamilies []string `protobuf:"bytes,48,rep,name=ipFamilies,proto3" json:"ipFamilies,omitempty"`
	// Controls whether Services are configured to use IPv4, IPv6, or both. Valid options
	// are PreferDualStack, RequireDualStack, and SingleStack.
	// More info: https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services
	IpFamilyPolicy string `protobuf:"bytes,49,opt,name=ipFamilyPolicy,proto3" json:"ipFamilyPolicy,omitempty"` // Next available 50.
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *IngressGatewayConfig) GetAutoscaleEnabled() bool {
	if x != nil {
		return x.AutoscaleEnabled
	}
	return false
}

func (x *IngressGatewayConfig) GetAutoscaleMax() uint32 {
	if x != nil {
		return x.AutoscaleMax
	}
	return 0
}

func (x *IngressGatewayConfig) GetAutoscaleMin() uint32 {
	if x != nil {
		return x.AutoscaleMin
	}
	return 0
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *IngressGatewayConfig) GetMemory() *TargetUtilizationConfig {
	if x != nil {
		return x.Memory
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *IngressGatewayConfig) GetCpu() *TargetUtilizationConfig {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *IngressGatewayConfig) GetCustomService() bool {
	if x != nil {
		return x.CustomService
	}
	return false
}

func (x *IngressGatewayConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *IngressGatewayConfig) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *IngressGatewayConfig) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *IngressGatewayConfig) GetLoadBalancerIP() string {
	if x != nil {
		return x.LoadBalancerIP
	}
	return ""
}

func (x *IngressGatewayConfig) GetLoadBalancerSourceRanges() []string {
	if x != nil {
		return x.LoadBalancerSourceRanges
	}
	return nil
}

func (x *IngressGatewayConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *IngressGatewayConfig) GetNodeSelector() map[string]string {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *IngressGatewayConfig) GetPodAnnotations() map[string]string {
	if x != nil {
		return x.PodAnnotations
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *IngressGatewayConfig) GetPodAntiAffinityLabelSelector() []*v11.LabelSelector {
	if x != nil {
		return x.PodAntiAffinityLabelSelector
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *IngressGatewayConfig) GetPodAntiAffinityTermLabelSelector() []*v11.LabelSelector {
	if x != nil {
		return x.PodAntiAffinityTermLabelSelector
	}
	return nil
}

func (x *IngressGatewayConfig) GetPorts() []*PortsConfig {
	if x != nil {
		return x.Ports
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *IngressGatewayConfig) GetReplicaCount() uint32 {
	if x != nil {
		return x.ReplicaCount
	}
	return 0
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *IngressGatewayConfig) GetResources() map[string]string {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *IngressGatewayConfig) GetSecretVolumes() []*SecretVolume {
	if x != nil {
		return x.SecretVolumes
	}
	return nil
}

func (x *IngressGatewayConfig) GetServiceAnnotations() map[string]string {
	if x != nil {
		return x.ServiceAnnotations
	}
	return nil
}

func (x *IngressGatewayConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *IngressGatewayConfig) GetRollingMaxSurge() *IntOrString {
	if x != nil {
		return x.RollingMaxSurge
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *IngressGatewayConfig) GetRollingMaxUnavailable() *IntOrString {
	if x != nil {
		return x.RollingMaxUnavailable
	}
	return nil
}

func (x *IngressGatewayConfig) GetExternalTrafficPolicy() string {
	if x != nil {
		return x.ExternalTrafficPolicy
	}
	return ""
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *IngressGatewayConfig) GetTolerations() []*v1.Toleration {
	if x != nil {
		return x.Tolerations
	}
	return nil
}

func (x *IngressGatewayConfig) GetIngressPorts() map[string]*structpb.Value {
	if x != nil {
		return x.IngressPorts
	}
	return nil
}

func (x *IngressGatewayConfig) GetAdditionalContainers() map[string]*structpb.Value {
	if x != nil {
		return x.AdditionalContainers
	}
	return nil
}

func (x *IngressGatewayConfig) GetConfigVolumes() map[string]*structpb.Value {
	if x != nil {
		return x.ConfigVolumes
	}
	return nil
}

func (x *IngressGatewayConfig) GetRunAsRoot() bool {
	if x != nil {
		return x.RunAsRoot
	}
	return false
}

func (x *IngressGatewayConfig) GetInjectionTemplate() string {
	if x != nil {
		return x.InjectionTemplate
	}
	return ""
}

func (x *IngressGatewayConfig) GetServiceAccount() *ServiceAccount {
	if x != nil {
		return x.ServiceAccount
	}
	return nil
}

func (x *IngressGatewayConfig) GetIpFamilies() []string {
	if x != nil {
		return x.IpFamilies
	}
	return nil
}

func (x *IngressGatewayConfig) GetIpFamilyPolicy() string {
	if x != nil {
		return x.IpFamilyPolicy
	}
	return ""
}

// MultiClusterConfig specifies the Configuration for Istio mesh across multiple clusters through the istio gateways.
type MultiClusterConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enables the connection between two kubernetes clusters via their respective ingressgateway services.
	// Use if the pods in each cluster cannot directly talk to one another.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The name of the cluster this installation will run in. This is required for sidecar injection
	// to properly label proxies
	ClusterName string `protobuf:"bytes,2,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	// The suffix for global service names.
	GlobalDomainSuffix string `protobuf:"bytes,3,opt,name=globalDomainSuffix,proto3" json:"globalDomainSuffix,omitempty"`
	// Enable envoy filter to translate `globalDomainSuffix` to cluster local suffix for cross cluster communication.
	IncludeEnvoyFilter bool `protobuf:"varint,4,opt,name=includeEnvoyFilter,proto3" json:"includeEnvoyFilter,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MultiClusterConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *MultiClusterConfig) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *MultiClusterConfig) GetGlobalDomainSuffix() string {
	if x != nil {
		return x.GlobalDomainSuffix
	}
	return ""
}

func (x *MultiClusterConfig) GetIncludeEnvoyFilter() bool {
	if x != nil {
		return x.IncludeEnvoyFilter
	}
	return false
}

// OutboundTrafficPolicyConfig controls the default behavior of the sidecar for handling outbound traffic from the application.
type OutboundTrafficPolicyConfig struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Mode          OutboundTrafficPolicyConfig_Mode `protobuf:"varint,2,opt,name=mode,proto3,enum=istio.operator.v1alpha1.OutboundTrafficPolicyConfig_Mode" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OutboundTrafficPolicyConfig) GetMode() OutboundTrafficPolicyConfig_Mode {
	if x != nil {
		return x.Mode
	}
	return OutboundTrafficPolicyConfig_ALLOW_ANY
}

// Configuration for Pilot.
type PilotConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Controls whether Pilot is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Controls whether a HorizontalPodAutoscaler is installed for Pilot.
	AutoscaleEnabled bool `protobuf:"varint,2,opt,name=autoscaleEnabled,proto3" json:"autoscaleEnabled,omitempty"`
	// Minimum number of replicas in the HorizontalPodAutoscaler for Pilot.
	AutoscaleMin uint32 `protobuf:"varint,3,opt,name=autoscaleMin,proto3" json:"autoscaleMin,omitempty"`
	// Maximum number of replicas in the HorizontalPodAutoscaler for Pilot.
	AutoscaleMax uint32 `protobuf:"varint,4,opt,name=autoscaleMax,proto3" json:"autoscaleMax,omitempty"`
	// See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#configurable-scaling-behavior
	AutoscaleBehavior map[string]*structpb.Value `protobuf:"bytes,40,rep,name=autoscaleBehavior,proto3" json:"autoscaleBehavior,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Number of replicas in the Pilot Deployment.
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	ReplicaCount uint32 `protobuf:"varint,5,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"`
	// Image name used for Pilot.
	//
	// This can be set either to image name if hub is also set, or can be set to the full hub:name string.
	//
	// Examples: custom-pilot, docker.io/someuser:custom-pilot
	Image string `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`
	// Trace sampling fraction.
	//
	// Used to set the fraction of time that traces are sampled. Higher values are more accurate but add CPU overhead.
	//
	// Allowed values: 0.0 to 1.0
	TraceSampling float64 `protobuf:"fixed64,8,opt,name=traceSampling,proto3" json:"traceSampling,omitempty"`
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	Resources *Resources `protobuf:"bytes,9,opt,name=resources,proto3" json:"resources,omitempty"`
	// Target CPU utilization used in HorizontalPodAutoscaler.
	//
	// See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	Cpu *TargetUtilizationConfig `protobuf:"bytes,11,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// K8s node selector.
	//
	// See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	NodeSelector map[string]string `protobuf:"bytes,12,rep,name=nodeSelector,proto3" json:"nodeSelector,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Maximum duration that a sidecar can be connected to a pilot.
	//
	// This setting balances out load across pilot instances, but adds some resource overhead.
	//
	// Examples: 300s, 30m, 1h
	KeepaliveMaxServerConnectionAge *v11.Duration `protobuf:"bytes,13,opt,name=keepaliveMaxServerConnectionAge,proto3" json:"keepaliveMaxServerConnectionAge,omitempty"`
	// Labels that are added to Pilot deployment.
	//
	// See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	DeploymentLabels map[string]string `protobuf:"bytes,14,rep,name=deploymentLabels,proto3" json:"deploymentLabels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Labels that are added to Pilot pods.
	//
	// See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	PodLabels map[string]string `protobuf:"bytes,36,rep,name=podLabels,proto3" json:"podLabels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Configuration settings passed to Pilot as a ConfigMap.
	//
	// This controls whether the mesh config map, generated from values.yaml is generated.
	// If false, pilot wil use default values or user-supplied values, in that order of preference.
	ConfigMap bool `protobuf:"varint,18,opt,name=configMap,proto3" json:"configMap,omitempty"`
	// Environment variables passed to the Pilot container.
	//
	// Examples:
	// env:
	//
	//	ENV_VAR_1: value1
	//	ENV_VAR_2: value2
	Env map[string]string `protobuf:"bytes,21,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// K8s affinity to set on the Pilot Pods.
	Affinity *v1.Affinity `protobuf:"bytes,22,opt,name=affinity,proto3" json:"affinity,omitempty"`
	// K8s rolling update strategy
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	RollingMaxSurge *IntOrString `protobuf:"bytes,24,opt,name=rollingMaxSurge,proto3" json:"rollingMaxSurge,omitempty"`
	// The number of pods that can be unavailable during a rolling update (see
	// `strategy.rollingUpdate.maxUnavailable` here:
	// https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/#DeploymentSpec).
	// May be specified as a number of pods or as a percent of the total number
	// of pods at the start of the update.
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	RollingMaxUnavailable *IntOrString `protobuf:"bytes,25,opt,name=rollingMaxUnavailable,proto3" json:"rollingMaxUnavailable,omitempty"`
	// The node tolerations to be applied to the Pilot deployment so that it can be
	// scheduled to particular nodes with matching taints.
	// More info: https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#scheduling
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	Tolerations []*v1.Toleration `protobuf:"bytes,26,rep,name=tolerations,proto3" json:"tolerations,omitempty"`
	// K8s annotations for pods.
	//
	// See: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	PodAnnotations map[string]string `protobuf:"bytes,30,rep,name=podAnnotations,proto3" json:"podAnnotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// K8s annotations for the Service.
	//
	// See: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
	ServiceAnnotations map[string]string `protobuf:"bytes,37,rep,name=serviceAnnotations,proto3" json:"serviceAnnotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// K8s annotations for the service account
	ServiceAccountAnnotations map[string]string `protobuf:"bytes,56,rep,name=serviceAccountAnnotations,proto3" json:"serviceAccountAnnotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Specifies an extra root certificate in PEM format. This certificate will be trusted
	// by pilot when resolving JWKS URIs.
	JwksResolverExtraRootCA string `protobuf:"bytes,32,opt,name=jwksResolverExtraRootCA,proto3" json:"jwksResolverExtraRootCA,omitempty"`
	// Hub to pull the container image from. Image will be `Hub/Image:Tag-Variant`.
	Hub string `protobuf:"bytes,34,opt,name=hub,proto3" json:"hub,omitempty"`
	// The container image tag to pull. Image will be `Hub/Image:Tag-Variant`.
	Tag *structpb.Value `protobuf:"bytes,35,opt,name=tag,proto3" json:"tag,omitempty"`
	// The container image variant to pull. Options are "debug" or "distroless". Unset will use the default for the given version.
	Variant string `protobuf:"bytes,39,opt,name=variant,proto3" json:"variant,omitempty"`
	// The seccompProfile for the Pilot container.
	//
	// See: https://kubernetes.io/docs/tutorials/security/seccomp/
	SeccompProfile *v1.SeccompProfile `protobuf:"bytes,38,opt,name=seccompProfile,proto3" json:"seccompProfile,omitempty"`
	// The k8s topologySpreadConstraints for the Pilot pods.
	TopologySpreadConstraints []*v1.TopologySpreadConstraint `protobuf:"bytes,41,rep,name=topologySpreadConstraints,proto3" json:"topologySpreadConstraints,omitempty"`
	// Additional container arguments for the Pilot container.
	ExtraContainerArgs map[string]*structpb.Value `protobuf:"bytes,42,rep,name=extraContainerArgs,proto3" json:"extraContainerArgs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Additional volumeMounts to add to the Pilot container.
	VolumeMounts []*v1.VolumeMount `protobuf:"bytes,49,rep,name=volumeMounts,proto3" json:"volumeMounts,omitempty"`
	// Additional volumes to add to the Pilot Pod.
	Volumes []*v1.Volume `protobuf:"bytes,51,rep,name=volumes,proto3" json:"volumes,omitempty"`
	// Defines which IP family to use for single stack or the order of IP families for dual-stack.
	// Valid list items are "IPv4", "IPv6".
	// More info: https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services
	IpFamilies []string `protobuf:"bytes,52,rep,name=ipFamilies,proto3" json:"ipFamilies,omitempty"`
	// Controls whether Services are configured to use IPv4, IPv6, or both. Valid options
	// are PreferDualStack, RequireDualStack, and SingleStack.
	// More info: https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services
	IpFamilyPolicy string `protobuf:"bytes,53,opt,name=ipFamilyPolicy,proto3" json:"ipFamilyPolicy,omitempty"`
	// Target memory utilization used in HorizontalPodAutoscaler.
	//
	// See https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	Memory *TargetUtilizationConfig `protobuf:"bytes,54,opt,name=memory,proto3" json:"memory,omitempty"`
	// Configures whether to use an existing CNI installation for workloads
	Cni   *CNIUsageConfig             `protobuf:"bytes,55,opt,name=cni,proto3" json:"cni,omitempty"`
	Taint *PilotTaintControllerConfig `protobuf:"bytes,57,opt,name=taint,proto3" json:"taint,omitempty"`
	// If set, `istiod` will allow connections from trusted node proxy ztunnels
	// in the provided namespace.
	TrustedZtunnelNamespace string `protobuf:"bytes,59,opt,name=trustedZtunnelNamespace,proto3" json:"trustedZtunnelNamespace,omitempty"`
	// Configuration for the istio-discovery chart when istiod is running in a remote cluster (e.g. "remote control plane").
	IstiodRemote *IstiodRemoteConfig `protobuf:"bytes,61,opt,name=istiodRemote,proto3" json:"istiodRemote,omitempty"`
	// Configuration for the istio-discovery chart
	EnvVarFrom    map[string]*structpb.Value `protobuf:"bytes,62,rep,name=envVarFrom,proto3" json:"envVarFrom,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PilotConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *PilotConfig) GetAutoscaleEnabled() bool {
	if x != nil {
		return x.AutoscaleEnabled
	}
	return false
}

func (x *PilotConfig) GetAutoscaleMin() uint32 {
	if x != nil {
		return x.AutoscaleMin
	}
	return 0
}

func (x *PilotConfig) GetAutoscaleMax() uint32 {
	if x != nil {
		return x.AutoscaleMax
	}
	return 0
}

func (x *PilotConfig) GetAutoscaleBehavior() map[string]*structpb.Value {
	if x != nil {
		return x.AutoscaleBehavior
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *PilotConfig) GetReplicaCount() uint32 {
	if x != nil {
		return x.ReplicaCount
	}
	return 0
}

func (x *PilotConfig) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *PilotConfig) GetTraceSampling() float64 {
	if x != nil {
		return x.TraceSampling
	}
	return 0
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *PilotConfig) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *PilotConfig) GetCpu() *TargetUtilizationConfig {
	if x != nil {
		return x.Cpu
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *PilotConfig) GetNodeSelector() map[string]string {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *PilotConfig) GetKeepaliveMaxServerConnectionAge() *v11.Duration {
	if x != nil {
		return x.KeepaliveMaxServerConnectionAge
	}
	return nil
}

func (x *PilotConfig) GetDeploymentLabels() map[string]string {
	if x != nil {
		return x.DeploymentLabels
	}
	return nil
}

func (x *PilotConfig) GetPodLabels() map[string]string {
	if x != nil {
		return x.PodLabels
	}
	return nil
}

func (x *PilotConfig) GetConfigMap() bool {
	if x != nil {
		return x.ConfigMap
	}
	return false
}

func (x *PilotConfig) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *PilotConfig) GetAffinity() *v1.Affinity {
	if x != nil {
		return x.Affinity
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *PilotConfig) GetRollingMaxSurge() *IntOrString {
	if x != nil {
		return x.RollingMaxSurge
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *PilotConfig) GetRollingMaxUnavailable() *IntOrString {
	if x != nil {
		return x.RollingMaxUnavailable
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *PilotConfig) GetTolerations() []*v1.Toleration {
	if x != nil {
		return x.Tolerations
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *PilotConfig) GetPodAnnotations() map[string]string {
	if x != nil {
		return x.PodAnnotations
	}
	return nil
}

func (x *PilotConfig) GetServiceAnnotations() map[string]string {
	if x != nil {
		return x.ServiceAnnotations
	}
	return nil
}

func (x *PilotConfig) GetServiceAccountAnnotations() map[string]string {
	if x != nil {
		return x.ServiceAccountAnnotations
	}
	return nil
}

func (x *PilotConfig) GetJwksResolverExtraRootCA() string {
	if x != nil {
		return x.JwksResolverExtraRootCA
	}
	return ""
}

func (x *PilotConfig) GetHub() string {
	if x != nil {
		return x.Hub
	}
	return ""
}

func (x *PilotConfig) GetTag() *structpb.Value {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *PilotConfig) GetVariant() string {
	if x != nil {
		return x.Variant
	}
	return ""
}

func (x *PilotConfig) GetSeccompProfile() *v1.SeccompProfile {
	if x != nil {
		return x.SeccompProfile
	}
	return nil
}

func (x *PilotConfig) GetTopologySpreadConstraints() []*v1.TopologySpreadConstraint {
	if x != nil {
		return x.TopologySpreadConstraints
	}
	return nil
}

func (x *PilotConfig) GetExtraContainerArgs() map[string]*structpb.Value {
	if x != nil {
		return x.ExtraContainerArgs
	}
	return nil
}

func (x *PilotConfig) GetVolumeMounts() []*v1.VolumeMount {
	if x != nil {
		return x.VolumeMounts
	}
	return nil
}

func (x *PilotConfig) GetVolumes() []*v1.Volume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *PilotConfig) GetIpFamilies() []string {
	if x != nil {
		return x.IpFamilies
	}
	return nil
}

func (x *PilotConfig) GetIpFamilyPolicy() string {
	if x != nil {
		return x.IpFamilyPolicy
	}
	return ""
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *PilotConfig) GetMemory() *TargetUtilizationConfig {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *PilotConfig) GetCni() *CNIUsageConfig {
	if x != nil {
		return x.Cni
	}
	return nil
}

func (x *PilotConfig) GetTaint() *PilotTaintControllerConfig {
	if x != nil {
		return x.Taint
	}
	return nil
}

func (x *PilotConfig) GetTrustedZtunnelNamespace() string {
	if x != nil {
		return x.TrustedZtunnelNamespace
	}
	return ""
}

func (x *PilotConfig) GetIstiodRemote() *IstiodRemoteConfig {
	if x != nil {
		return x.IstiodRemote
	}
	return nil
}

func (x *PilotConfig) GetEnvVarFrom() map[string]*structpb.Value {
	if x != nil {
		return x.EnvVarFrom
	}
	return nil
}

type PilotTaintControllerConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enable the untaint controller for new nodes. This aims to solve a race for CNI installation on
	// new nodes. For this to work, the newly added nodes need to have the istio CNI taint as they are
	// added to the cluster. This is usually done by configuring the cluster infra provider.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The namespace of the CNI daemonset, incase it's not the same as istiod.
	Namespace     string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PilotTaintControllerConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *PilotTaintControllerConfig) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// Controls legacy k8s ingress. Only one pilot profile should enable ingress support.
type PilotIngressConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Sets the type ingress service for Pilot.
	//
	// If empty, node-port is assumed.
	//
	// Allowed values: node-port, istio-ingressgateway, ingress
	IngressService        string                `protobuf:"bytes,1,opt,name=ingressService,proto3" json:"ingressService,omitempty"`
	IngressControllerMode IngressControllerMode `protobuf:"varint,2,opt,name=ingressControllerMode,proto3,enum=istio.operator.v1alpha1.IngressControllerMode" json:"ingressControllerMode,omitempty"`
	// If mode is STRICT, this value must be set on "kubernetes.io/ingress.class" annotation to activate.
	IngressClass  string `protobuf:"bytes,3,opt,name=ingressClass,proto3" json:"ingressClass,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PilotIngressConfig) GetIngressService() string {
	if x != nil {
		return x.IngressService
	}
	return ""
}

func (x *PilotIngressConfig) GetIngressControllerMode() IngressControllerMode {
	if x != nil {
		return x.IngressControllerMode
	}
	return IngressControllerMode_UNSPECIFIED
}

func (x *PilotIngressConfig) GetIngressClass() string {
	if x != nil {
		return x.IngressClass
	}
	return ""
}

// Controls whether Istio policy is applied to Pilot.
type PilotPolicyConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Controls whether Istio policy is applied to Pilot.
	Enabled       bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PilotPolicyConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// Controls telemetry configuration
type TelemetryConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Controls whether telemetry is exported for Pilot.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Configuration for Telemetry v2.
	V2            *TelemetryV2Config `protobuf:"bytes,3,opt,name=v2,proto3" json:"v2,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TelemetryConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TelemetryConfig) GetV2() *TelemetryV2Config {
	if x != nil {
		return x.V2
	}
	return nil
}

// Controls whether pilot will configure telemetry v2.
type TelemetryV2Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Controls whether pilot will configure telemetry v2.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Telemetry v2 settings for prometheus.
	Prometheus *TelemetryV2PrometheusConfig `protobuf:"bytes,2,opt,name=prometheus,proto3" json:"prometheus,omitempty"`
	// Telemetry v2 settings for stackdriver.
	Stackdriver   *TelemetryV2StackDriverConfig `protobuf:"bytes,3,opt,name=stackdriver,proto3" json:"stackdriver,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TelemetryV2Config) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TelemetryV2Config) GetPrometheus() *TelemetryV2PrometheusConfig {
	if x != nil {
		return x.Prometheus
	}
	return nil
}

func (x *TelemetryV2Config) GetStackdriver() *TelemetryV2StackDriverConfig {
	if x != nil {
		return x.Stackdriver
	}
	return nil
}

// Controls telemetry v2 prometheus settings.
type TelemetryV2PrometheusConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Controls whether stats envoyfilter would be enabled or not.
	Enabled       bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TelemetryV2PrometheusConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// TelemetryV2StackDriverConfig controls telemetry v2 stackdriver settings.
type TelemetryV2StackDriverConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TelemetryV2StackDriverConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// Configuration for a port.
type PortsConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Port name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Port number.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// NodePort number.
	NodePort int32 `protobuf:"varint,3,opt,name=nodePort,proto3" json:"nodePort,omitempty"`
	// Target port number.
	TargetPort int32 `protobuf:"varint,4,opt,name=targetPort,proto3" json:"targetPort,omitempty"`
	// Protocol name.
	Protocol      string `protobuf:"bytes,5,opt,name=protocol,proto3" json:"protocol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PortsConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PortsConfig) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PortsConfig) GetNodePort() int32 {
	if x != nil {
		return x.NodePort
	}
	return 0
}

func (x *PortsConfig) GetTargetPort() int32 {
	if x != nil {
		return x.TargetPort
	}
	return 0
}

func (x *PortsConfig) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

// Configuration for Proxy.
type ProxyConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Controls the 'policy' in the sidecar injector.
	AutoInject string `protobuf:"bytes,4,opt,name=autoInject,proto3" json:"autoInject,omitempty"`
	// Domain for the cluster, default: "cluster.local".
	//
	// K8s allows this to be customized, see https://kubernetes.io/docs/tasks/administer-cluster/dns-custom-nameservers/
	ClusterDomain string `protobuf:"bytes,5,opt,name=clusterDomain,proto3" json:"clusterDomain,omitempty"`
	// Per Component log level for proxy, applies to gateways and sidecars.
	//
	// If a component level is not set, then the global "logLevel" will be used. If left empty, "misc:error" is used.
	ComponentLogLevel string `protobuf:"bytes,6,opt,name=componentLogLevel,proto3" json:"componentLogLevel,omitempty"`
	// Enables core dumps for newly injected sidecars.
	//
	// If set, newly injected sidecars will have core dumps enabled.
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	EnableCoreDump bool `protobuf:"varint,9,opt,name=enableCoreDump,proto3" json:"enableCoreDump,omitempty"`
	// Specifies the Istio ingress ports not to capture.
	ExcludeInboundPorts string `protobuf:"bytes,12,opt,name=excludeInboundPorts,proto3" json:"excludeInboundPorts,omitempty"`
	// Lists the excluded IP ranges of Istio egress traffic that the sidecar captures.
	ExcludeIPRanges string `protobuf:"bytes,13,opt,name=excludeIPRanges,proto3" json:"excludeIPRanges,omitempty"`
	// Image name or path for the proxy, default: "proxyv2".
	//
	// If registry or tag are not specified, global.hub and global.tag are used.
	//
	// Examples: my-proxy (uses global.hub/tag), docker.io/myrepo/my-proxy:v1.0.0
	Image string `protobuf:"bytes,14,opt,name=image,proto3" json:"image,omitempty"`
	// Lists the IP ranges of Istio egress traffic that the sidecar captures.
	//
	// Example: "172.30.0.0/16,172.20.0.0/16"
	// This would only capture egress traffic on those two IP Ranges, all other outbound traffic would # be allowed by the sidecar."
	IncludeIPRanges string `protobuf:"bytes,16,opt,name=includeIPRanges,proto3" json:"includeIPRanges,omitempty"`
	// Log level for proxy, applies to gateways and sidecars. If left empty, "warning" is used. Expected values are: trace\|debug\|info\|warning\|error\|critical\|off
	LogLevel string `protobuf:"bytes,18,opt,name=logLevel,proto3" json:"logLevel,omitempty"`
	// Path to the file to which the proxy will write outlier detection logs.
	//
	// Example: "/dev/stdout"
	// This would write the logs to standard output.
	OutlierLogPath string `protobuf:"bytes,42,opt,name=outlierLogPath,proto3" json:"outlierLogPath,omitempty"`
	// Enables privileged securityContext for the istio-proxy container.
	//
	// See https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	Privileged bool `protobuf:"varint,19,opt,name=privileged,proto3" json:"privileged,omitempty"`
	// Sets the initial delay for readiness probes in seconds.
	ReadinessInitialDelaySeconds uint32 `protobuf:"varint,20,opt,name=readinessInitialDelaySeconds,proto3" json:"readinessInitialDelaySeconds,omitempty"`
	// Sets the interval between readiness probes in seconds.
	ReadinessPeriodSeconds uint32 `protobuf:"varint,21,opt,name=readinessPeriodSeconds,proto3" json:"readinessPeriodSeconds,omitempty"`
	// Sets the number of successive failed probes before indicating readiness failure.
	ReadinessFailureThreshold uint32 `protobuf:"varint,22,opt,name=readinessFailureThreshold,proto3" json:"readinessFailureThreshold,omitempty"`
	// Configures the startup probe for the istio-proxy container.
	StartupProbe *StartupProbe `protobuf:"bytes,41,opt,name=startupProbe,proto3" json:"startupProbe,omitempty"`
	// Default port used for the Pilot agent's health checks.
	StatusPort uint32 `protobuf:"varint,23,opt,name=statusPort,proto3" json:"statusPort,omitempty"`
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	Resources *Resources `protobuf:"bytes,24,opt,name=resources,proto3" json:"resources,omitempty"`
	// Specify which tracer to use. One of: zipkin, lightstep, datadog, stackdriver.
	// If using stackdriver tracer outside GCP, set env GOOGLE_APPLICATION_CREDENTIALS to the GCP credential file.
	Tracer Tracer `protobuf:"varint,25,opt,name=tracer,proto3,enum=istio.operator.v1alpha1.Tracer" json:"tracer,omitempty"`
	// A comma separated list of outbound ports to be excluded from redirection to Envoy.
	ExcludeOutboundPorts string `protobuf:"bytes,28,opt,name=excludeOutboundPorts,proto3" json:"excludeOutboundPorts,omitempty"`
	// The k8s lifecycle hooks definition (pod.spec.containers.lifecycle) for the proxy container.
	// More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
	Lifecycle *v1.Lifecycle `protobuf:"bytes,36,opt,name=lifecycle,proto3" json:"lifecycle,omitempty"`
	// Controls if sidecar is injected at the front of the container list and blocks the start of the other containers until the proxy is ready
	//
	// Deprecated: replaced by ProxyConfig setting which allows per-pod configuration of this behavior.
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	HoldApplicationUntilProxyStarts bool `protobuf:"varint,37,opt,name=holdApplicationUntilProxyStarts,proto3" json:"holdApplicationUntilProxyStarts,omitempty"`
	// A comma separated list of inbound ports for which traffic is to be redirected to Envoy.
	// The wildcard character '*' can be used to configure redirection for all ports.
	IncludeInboundPorts string `protobuf:"bytes,38,opt,name=includeInboundPorts,proto3" json:"includeInboundPorts,omitempty"`
	// A comma separated list of outbound ports for which traffic is to be redirected to Envoy, regardless of the destination IP.
	IncludeOutboundPorts string `protobuf:"bytes,39,opt,name=includeOutboundPorts,proto3" json:"includeOutboundPorts,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ProxyConfig) GetAutoInject() string {
	if x != nil {
		return x.AutoInject
	}
	return ""
}

func (x *ProxyConfig) GetClusterDomain() string {
	if x != nil {
		return x.ClusterDomain
	}
	return ""
}

func (x *ProxyConfig) GetComponentLogLevel() string {
	if x != nil {
		return x.ComponentLogLevel
	}
	return ""
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *ProxyConfig) GetEnableCoreDump() bool {
	if x != nil {
		return x.EnableCoreDump
	}
	return false
}

func (x *ProxyConfig) GetExcludeInboundPorts() string {
	if x != nil {
		return x.ExcludeInboundPorts
	}
	return ""
}

func (x *ProxyConfig) GetExcludeIPRanges() string {
	if x != nil {
		return x.ExcludeIPRanges
	}
	return ""
}

func (x *ProxyConfig) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ProxyConfig) GetIncludeIPRanges() string {
	if x != nil {
		return x.IncludeIPRanges
	}
	return ""
}

func (x *ProxyConfig) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

func (x *ProxyConfig) GetOutlierLogPath() string {
	if x != nil {
		return x.OutlierLogPath
	}
	return ""
}

func (x *ProxyConfig) GetPrivileged() bool {
	if x != nil {
		return x.Privileged
	}
	return false
}

func (x *ProxyConfig) GetReadinessInitialDelaySeconds() uint32 {
	if x != nil {
		return x.ReadinessInitialDelaySeconds
	}
	return 0
}

func (x *ProxyConfig) GetReadinessPeriodSeconds() uint32 {
	if x != nil {
		return x.ReadinessPeriodSeconds
	}
	return 0
}

func (x *ProxyConfig) GetReadinessFailureThreshold() uint32 {
	if x != nil {
		return x.ReadinessFailureThreshold
	}
	return 0
}

func (x *ProxyConfig) GetStartupProbe() *StartupProbe {
	if x != nil {
		return x.StartupProbe
	}
	return nil
}

func (x *ProxyConfig) GetStatusPort() uint32 {
	if x != nil {
		return x.StatusPort
	}
	return 0
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *ProxyConfig) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ProxyConfig) GetTracer() Tracer {
	if x != nil {
		return x.Tracer
	}
	return Tracer_zipkin
}

func (x *ProxyConfig) GetExcludeOutboundPorts() string {
	if x != nil {
		return x.ExcludeOutboundPorts
	}
	return ""
}

func (x *ProxyConfig) GetLifecycle() *v1.Lifecycle {
	if x != nil {
		return x.Lifecycle
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *ProxyConfig) GetHoldApplicationUntilProxyStarts() bool {
	if x != nil {
		return x.HoldApplicationUntilProxyStarts
	}
	return false
}

func (x *ProxyConfig) GetIncludeInboundPorts() string {
	if x != nil {
		return x.IncludeInboundPorts
	}
	return ""
}

func (x *ProxyConfig) GetIncludeOutboundPorts() string {
	if x != nil {
		return x.IncludeOutboundPorts
	}
	return ""
}

type StartupProbe struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enables or disables a startup probe.
	// For optimal startup times, changing this should be tied to the readiness probe values.
	//
	// If the probe is enabled, it is recommended to have delay=0s,period=15s,failureThreshold=4.
	// This ensures the pod is marked ready immediately after the startup probe passes (which has a 1s poll interval),
	// and doesn't spam the readiness endpoint too much
	//
	// If the probe is disabled, it is recommended to have delay=1s,period=2s,failureThreshold=30.
	// This ensures the startup is reasonable fast (polling every 2s). 1s delay is used since the startup is not often ready instantly.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	FailureThreshold uint32 `protobuf:"varint,2,opt,name=failureThreshold,proto3" json:"failureThreshold,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StartupProbe) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *StartupProbe) GetFailureThreshold() uint32 {
	if x != nil {
		return x.FailureThreshold
	}
	return 0
}

// Configuration for proxy_init container which sets the pods' networking to intercept the inbound/outbound traffic.
type ProxyInitConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies the image for the proxy_init container.
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// K8s resources settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	Resources     *Resources `protobuf:"bytes,5,opt,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProxyInitConfig) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *ProxyInitConfig) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

// Configuration for K8s resource requests.
type ResourcesRequestsConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CPU requests.
	Cpu string `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// Memory requests.
	Memory        string `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourcesRequestsConfig) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *ResourcesRequestsConfig) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

// Configuration for the SecretDiscoveryService instead of using K8S secrets to mount the certificates.
type SDSConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	Token         map[string]*structpb.Value `protobuf:"bytes,5,rep,name=token,proto3" json:"token,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *SDSConfig) GetToken() map[string]*structpb.Value {
	if x != nil {
		return x.Token
	}
	return nil
}

// Configuration for secret volume mounts.
//
// See https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets.
type SecretVolume struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MountPath     string                 `protobuf:"bytes,1,opt,name=mountPath,proto3" json:"mountPath,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SecretName    string                 `protobuf:"bytes,3,opt,name=secretName,proto3" json:"secretName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SecretVolume) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *SecretVolume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecretVolume) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

// SidecarInjectorConfig is described in istio.io documentation.
type SidecarInjectorConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enables sidecar auto-injection in namespaces by default.
	EnableNamespacesByDefault bool `protobuf:"varint,2,opt,name=enableNamespacesByDefault,proto3" json:"enableNamespacesByDefault,omitempty"`
	// Setting this to `IfNeeded` will result in the sidecar injector being run again if additional mutations occur. Default: Never
	ReinvocationPolicy string `protobuf:"bytes,3,opt,name=reinvocationPolicy,proto3" json:"reinvocationPolicy,omitempty"`
	// Instructs Istio to not inject the sidecar on those pods, based on labels that are present in those pods.
	//
	// Annotations in the pods have higher precedence than the label selectors.
	// Order of evaluation: Pod Annotations → NeverInjectSelector → AlwaysInjectSelector → Default Policy.
	// See https://istio.io/docs/setup/kubernetes/additional-setup/sidecar-injection/#more-control-adding-exceptions
	NeverInjectSelector []*v11.LabelSelector `protobuf:"bytes,11,rep,name=neverInjectSelector,proto3" json:"neverInjectSelector,omitempty"`
	// See NeverInjectSelector.
	AlwaysInjectSelector []*v11.LabelSelector `protobuf:"bytes,12,rep,name=alwaysInjectSelector,proto3" json:"alwaysInjectSelector,omitempty"`
	// If true, webhook or istioctl injector will rewrite PodSpec for liveness health check to redirect request to sidecar. This makes liveness check work even when mTLS is enabled.
	RewriteAppHTTPProbe bool `protobuf:"varint,16,opt,name=rewriteAppHTTPProbe,proto3" json:"rewriteAppHTTPProbe,omitempty"`
	// injectedAnnotations are additional annotations that will be added to the pod spec after injection
	// This is primarily to support PSP annotations.
	InjectedAnnotations map[string]string `protobuf:"bytes,19,rep,name=injectedAnnotations,proto3" json:"injectedAnnotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Configure the injection url for sidecar injector webhook
	InjectionURL string `protobuf:"bytes,22,opt,name=injectionURL,proto3" json:"injectionURL,omitempty"`
	// Templates defines a set of custom injection templates that can be used. For example, defining:
	//
	// templates:
	//
	//	hello: |
	//	  metadata:
	//	    labels:
	//	      hello: world
	//
	// Then starting a pod with the `inject.istio.io/templates: hello` annotation, will result in the pod
	// being injected with the hello=world labels.
	// This is intended for advanced configuration only; most users should use the built in template
	Templates map[string]*structpb.Value `protobuf:"bytes,23,rep,name=templates,proto3" json:"templates,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// defaultTemplates: ["sidecar", "hello"]
	DefaultTemplates []string `protobuf:"bytes,24,rep,name=defaultTemplates,proto3" json:"defaultTemplates,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SidecarInjectorConfig) GetEnableNamespacesByDefault() bool {
	if x != nil {
		return x.EnableNamespacesByDefault
	}
	return false
}

func (x *SidecarInjectorConfig) GetReinvocationPolicy() string {
	if x != nil {
		return x.ReinvocationPolicy
	}
	return ""
}

func (x *SidecarInjectorConfig) GetNeverInjectSelector() []*v11.LabelSelector {
	if x != nil {
		return x.NeverInjectSelector
	}
	return nil
}

func (x *SidecarInjectorConfig) GetAlwaysInjectSelector() []*v11.LabelSelector {
	if x != nil {
		return x.AlwaysInjectSelector
	}
	return nil
}

func (x *SidecarInjectorConfig) GetRewriteAppHTTPProbe() bool {
	if x != nil {
		return x.RewriteAppHTTPProbe
	}
	return false
}

func (x *SidecarInjectorConfig) GetInjectedAnnotations() map[string]string {
	if x != nil {
		return x.InjectedAnnotations
	}
	return nil
}

func (x *SidecarInjectorConfig) GetInjectionURL() string {
	if x != nil {
		return x.InjectionURL
	}
	return ""
}

func (x *SidecarInjectorConfig) GetTemplates() map[string]*structpb.Value {
	if x != nil {
		return x.Templates
	}
	return nil
}

func (x *SidecarInjectorConfig) GetDefaultTemplates() []string {
	if x != nil {
		return x.DefaultTemplates
	}
	return nil
}

// Configuration for each of the supported tracers.
type TracerConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for the datadog tracing service.
	Datadog *TracerDatadogConfig `protobuf:"bytes,1,opt,name=datadog,proto3" json:"datadog,omitempty"`
	// Configuration for the lightstep tracing service.
	Lightstep *TracerLightStepConfig `protobuf:"bytes,2,opt,name=lightstep,proto3" json:"lightstep,omitempty"`
	// Configuration for the zipkin tracing service.
	Zipkin *TracerZipkinConfig `protobuf:"bytes,3,opt,name=zipkin,proto3" json:"zipkin,omitempty"`
	// Configuration for the stackdriver tracing service.
	Stackdriver   *TracerStackdriverConfig `protobuf:"bytes,4,opt,name=stackdriver,proto3" json:"stackdriver,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TracerConfig) GetDatadog() *TracerDatadogConfig {
	if x != nil {
		return x.Datadog
	}
	return nil
}

func (x *TracerConfig) GetLightstep() *TracerLightStepConfig {
	if x != nil {
		return x.Lightstep
	}
	return nil
}

func (x *TracerConfig) GetZipkin() *TracerZipkinConfig {
	if x != nil {
		return x.Zipkin
	}
	return nil
}

func (x *TracerConfig) GetStackdriver() *TracerStackdriverConfig {
	if x != nil {
		return x.Stackdriver
	}
	return nil
}

// Configuration for the datadog tracing service.
type TracerDatadogConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Address in host:port format for reporting trace data to the Datadog agent.
	Address       string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TracerDatadogConfig) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Configuration for the lightstep tracing service.
type TracerLightStepConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Sets the lightstep satellite pool address in host:port format for reporting trace data.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Sets the lightstep access token.
	AccessToken   string `protobuf:"bytes,2,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TracerLightStepConfig) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TracerLightStepConfig) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

// Configuration for the zipkin tracing service.
type TracerZipkinConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Address of zipkin instance in host:port format for reporting trace data.
	//
	// Example: <zipkin-collector-service>.<zipkin-collector-namespace>:941
	Address       string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TracerZipkinConfig) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Configuration for the stackdriver tracing service.
type TracerStackdriverConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// enables trace output to stdout.
	Debug bool `protobuf:"varint,1,opt,name=debug,proto3" json:"debug,omitempty"`
	// The global default max number of attributes per span.
	MaxNumberOfAttributes uint32 `protobuf:"varint,2,opt,name=maxNumberOfAttributes,proto3" json:"maxNumberOfAttributes,omitempty"`
	// The global default max number of annotation events per span.
	MaxNumberOfAnnotations uint32 `protobuf:"varint,3,opt,name=maxNumberOfAnnotations,proto3" json:"maxNumberOfAnnotations,omitempty"`
	// The global default max number of message events per span.
	MaxNumberOfMessageEvents uint32 `protobuf:"varint,4,opt,name=maxNumberOfMessageEvents,proto3" json:"maxNumberOfMessageEvents,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *TracerStackdriverConfig) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *TracerStackdriverConfig) GetMaxNumberOfAttributes() uint32 {
	if x != nil {
		return x.MaxNumberOfAttributes
	}
	return 0
}

func (x *TracerStackdriverConfig) GetMaxNumberOfAnnotations() uint32 {
	if x != nil {
		return x.MaxNumberOfAnnotations
	}
	return 0
}

func (x *TracerStackdriverConfig) GetMaxNumberOfMessageEvents() uint32 {
	if x != nil {
		return x.MaxNumberOfMessageEvents
	}
	return 0
}

type BaseConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// For Helm2 use, adds the CRDs to templates.
	EnableCRDTemplates bool `protobuf:"varint,1,opt,name=enableCRDTemplates,proto3" json:"enableCRDTemplates,omitempty"`
	// CRDs to exclude. Requires `enableCRDTemplates`
	ExcludedCRDs []string `protobuf:"bytes,6,rep,name=excludedCRDs,proto3" json:"excludedCRDs,omitempty"`
	// URL to use for validating webhook.
	ValidationURL string `protobuf:"bytes,2,opt,name=validationURL,proto3" json:"validationURL,omitempty"`
	// For istioctl usage to disable istio config crds in base
	EnableIstioConfigCRDs bool `protobuf:"varint,3,opt,name=enableIstioConfigCRDs,proto3" json:"enableIstioConfigCRDs,omitempty"`
	ValidateGateway       bool `protobuf:"varint,4,opt,name=validateGateway,proto3" json:"validateGateway,omitempty"`
	// validation webhook CA bundle
	ValidationCABundle string `protobuf:"bytes,5,opt,name=validationCABundle,proto3" json:"validationCABundle,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *BaseConfig) GetEnableCRDTemplates() bool {
	if x != nil {
		return x.EnableCRDTemplates
	}
	return false
}

func (x *BaseConfig) GetExcludedCRDs() []string {
	if x != nil {
		return x.ExcludedCRDs
	}
	return nil
}

func (x *BaseConfig) GetValidationURL() string {
	if x != nil {
		return x.ValidationURL
	}
	return ""
}

func (x *BaseConfig) GetEnableIstioConfigCRDs() bool {
	if x != nil {
		return x.EnableIstioConfigCRDs
	}
	return false
}

func (x *BaseConfig) GetValidateGateway() bool {
	if x != nil {
		return x.ValidateGateway
	}
	return false
}

func (x *BaseConfig) GetValidationCABundle() string {
	if x != nil {
		return x.ValidationCABundle
	}
	return ""
}

type IstiodRemoteConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// URL to use for sidecar injector webhook.
	InjectionURL string `protobuf:"bytes,1,opt,name=injectionURL,proto3" json:"injectionURL,omitempty"`
	// Path to use for the sidecar injector webhook service.
	InjectionPath string `protobuf:"bytes,2,opt,name=injectionPath,proto3" json:"injectionPath,omitempty"`
	// injector ca bundle
	InjectionCABundle string `protobuf:"bytes,3,opt,name=injectionCABundle,proto3" json:"injectionCABundle,omitempty"`
	// Indicates if this cluster/install should consume a "remote" istiod instance,
	Enabled bool `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// If `true`, indicates that this cluster/install should consume a "local istiod" installation,
	// local istiod inject sidecars
	EnabledLocalInjectorIstiod bool `protobuf:"varint,6,opt,name=enabledLocalInjectorIstiod,proto3" json:"enabledLocalInjectorIstiod,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *IstiodRemoteConfig) GetInjectionURL() string {
	if x != nil {
		return x.InjectionURL
	}
	return ""
}

func (x *IstiodRemoteConfig) GetInjectionPath() string {
	if x != nil {
		return x.InjectionPath
	}
	return ""
}

func (x *IstiodRemoteConfig) GetInjectionCABundle() string {
	if x != nil {
		return x.InjectionCABundle
	}
	return ""
}

func (x *IstiodRemoteConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *IstiodRemoteConfig) GetEnabledLocalInjectorIstiod() bool {
	if x != nil {
		return x.EnabledLocalInjectorIstiod
	}
	return false
}

type Values struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for the Istio CNI plugin.
	Cni *CNIConfig `protobuf:"bytes,2,opt,name=cni,proto3" json:"cni,omitempty"`
	// Configuration for ingress and egress gateways.
	Gateways *GatewaysConfig `protobuf:"bytes,5,opt,name=gateways,proto3" json:"gateways,omitempty"`
	// Global configuration for Istio components.
	Global *GlobalConfig `protobuf:"bytes,6,opt,name=global,proto3" json:"global,omitempty"`
	// Configuration for the Pilot component.
	Pilot *PilotConfig `protobuf:"bytes,10,opt,name=pilot,proto3" json:"pilot,omitempty"`
	// Configuration for the ZTunnel component.
	Ztunnel *structpb.Value `protobuf:"bytes,41,opt,name=ztunnel,proto3" json:"ztunnel,omitempty"`
	// Controls whether telemetry is exported for Pilot.
	Telemetry *TelemetryConfig `protobuf:"bytes,23,opt,name=telemetry,proto3" json:"telemetry,omitempty"`
	// Configuration for the sidecar injector webhook.
	SidecarInjectorWebhook *SidecarInjectorConfig `protobuf:"bytes,13,opt,name=sidecarInjectorWebhook,proto3" json:"sidecarInjectorWebhook,omitempty"`
	// Configuration for the Istio CNI plugin.
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	IstioCni *CNIUsageConfig `protobuf:"bytes,19,opt,name=istio_cni,json=istioCni,proto3" json:"istio_cni,omitempty"`
	// Identifies the revision this installation is associated with.
	Revision string `protobuf:"bytes,21,opt,name=revision,proto3" json:"revision,omitempty"`
	// Used internally to identify the owner of each resource.
	OwnerName string `protobuf:"bytes,22,opt,name=ownerName,proto3" json:"ownerName,omitempty"`
	// Defines runtime configuration of components, including Istiod and istio-agent behavior.
	// See https://istio.io/docs/reference/config/istio.mesh.v1alpha1/ for all available options.
	// TODO can this import the real mesh config API?
	MeshConfig *structpb.Value `protobuf:"bytes,36,opt,name=meshConfig,proto3" json:"meshConfig,omitempty"`
	// Configuration for the base component.
	Base *BaseConfig `protobuf:"bytes,37,opt,name=base,proto3" json:"base,omitempty"`
	// Configuration for istiod-remote.
	// DEPRECATED - istiod-remote chart is removed and replaced with
	// `istio-discovery --set values.istiodRemote.enabled=true`
	//
	// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
	IstiodRemote *IstiodRemoteConfig `protobuf:"bytes,38,opt,name=istiodRemote,proto3" json:"istiodRemote,omitempty"`
	// Specifies the aliases for the Istio control plane revision. A MutatingWebhookConfiguration
	// is created for each alias.
	RevisionTags []string `protobuf:"bytes,39,rep,name=revisionTags,proto3" json:"revisionTags,omitempty"`
	// The name of the default revision in the cluster.
	DefaultRevision string `protobuf:"bytes,40,opt,name=defaultRevision,proto3" json:"defaultRevision,omitempty"`
	// Specifies which installation configuration profile to apply.
	Profile string `protobuf:"bytes,42,opt,name=profile,proto3" json:"profile,omitempty"`
	// Specifies the compatibility version to use. When this is set, the control plane will
	// be configured with the same defaults as the specified version.
	CompatibilityVersion string `protobuf:"bytes,43,opt,name=compatibilityVersion,proto3" json:"compatibilityVersion,omitempty"`
	// Specifies experimental helm fields that could be removed or changed in the future
	Experimental *ExperimentalConfig `protobuf:"bytes,44,opt,name=experimental,proto3" json:"experimental,omitempty"`
	// Configuration for Gateway Classes
	GatewayClasses *structpb.Value `protobuf:"bytes,45,opt,name=gatewayClasses,proto3" json:"gatewayClasses,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Values) GetCni() *CNIConfig {
	if x != nil {
		return x.Cni
	}
	return nil
}

func (x *Values) GetGateways() *GatewaysConfig {
	if x != nil {
		return x.Gateways
	}
	return nil
}

func (x *Values) GetGlobal() *GlobalConfig {
	if x != nil {
		return x.Global
	}
	return nil
}

func (x *Values) GetPilot() *PilotConfig {
	if x != nil {
		return x.Pilot
	}
	return nil
}

func (x *Values) GetZtunnel() *structpb.Value {
	if x != nil {
		return x.Ztunnel
	}
	return nil
}

func (x *Values) GetTelemetry() *TelemetryConfig {
	if x != nil {
		return x.Telemetry
	}
	return nil
}

func (x *Values) GetSidecarInjectorWebhook() *SidecarInjectorConfig {
	if x != nil {
		return x.SidecarInjectorWebhook
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *Values) GetIstioCni() *CNIUsageConfig {
	if x != nil {
		return x.IstioCni
	}
	return nil
}

func (x *Values) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *Values) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *Values) GetMeshConfig() *structpb.Value {
	if x != nil {
		return x.MeshConfig
	}
	return nil
}

func (x *Values) GetBase() *BaseConfig {
	if x != nil {
		return x.Base
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/apis/values_types.proto.
func (x *Values) GetIstiodRemote() *IstiodRemoteConfig {
	if x != nil {
		return x.IstiodRemote
	}
	return nil
}

func (x *Values) GetRevisionTags() []string {
	if x != nil {
		return x.RevisionTags
	}
	return nil
}

func (x *Values) GetDefaultRevision() string {
	if x != nil {
		return x.DefaultRevision
	}
	return ""
}

func (x *Values) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *Values) GetCompatibilityVersion() string {
	if x != nil {
		return x.CompatibilityVersion
	}
	return ""
}

func (x *Values) GetExperimental() *ExperimentalConfig {
	if x != nil {
		return x.Experimental
	}
	return nil
}

func (x *Values) GetGatewayClasses() *structpb.Value {
	if x != nil {
		return x.GatewayClasses
	}
	return nil
}

// ExperimentalConfig is a placeholder for experimental installation features.
type ExperimentalConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Controls whether the experimental feature is enabled.
	StableValidationPolicy bool `protobuf:"varint,1,opt,name=stableValidationPolicy,proto3" json:"stableValidationPolicy,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ExperimentalConfig) GetStableValidationPolicy() bool {
	if x != nil {
		return x.StableValidationPolicy
	}
	return false
}

// IntOrString is a type that can hold an int32 or a string.  When used in
// JSON or YAML marshalling and unmarshalling, it produces or consumes the
// inner type.  This allows you to have, for example, a JSON field that can
// accept a name or number.
// TODO: Rename to Int32OrString
//
// +protobuf=true
// +protobuf.options.(gogoproto.goproto_stringer)=false
// +k8s:openapi-gen=true
type IntOrString struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Type          int64                   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	IntVal        *wrapperspb.Int32Value  `protobuf:"bytes,2,opt,name=intVal,proto3" json:"intVal,omitempty"`
	StrVal        *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=strVal,proto3" json:"strVal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IntOrString) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *IntOrString) GetIntVal() *wrapperspb.Int32Value {
	if x != nil {
		return x.IntVal
	}
	return nil
}

func (x *IntOrString) GetStrVal() *wrapperspb.StringValue {
	if x != nil {
		return x.StrVal
	}
	return nil
}

// Configuration for Waypoint proxies.
type WaypointConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// K8s resource settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#resource-requests-and-limits-of-pod-and-container
	Resources *Resources `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
	// K8s affinity settings for waypoint pods.
	//
	// See https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
	Affinity *v1.Affinity `protobuf:"bytes,2,opt,name=affinity,proto3" json:"affinity,omitempty"`
	// K8s topology spread constraints settings.
	//
	// See https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
	TopologySpreadConstraints []*v1.TopologySpreadConstraint `protobuf:"bytes,3,rep,name=topologySpreadConstraints,proto3" json:"topologySpreadConstraints,omitempty"`
	// K8s node labels settings.
	//
	// See https://kubernetes.io/docs/user-guide/node-selection/
	NodeSelector *v1.NodeSelector `protobuf:"bytes,4,opt,name=nodeSelector,proto3" json:"nodeSelector,omitempty"`
	// K8s tolerations settings.
	//
	// See https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
	Toleration    []*v1.Toleration `protobuf:"bytes,5,rep,name=toleration,proto3" json:"toleration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WaypointConfig) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *WaypointConfig) GetAffinity() *v1.Affinity {
	if x != nil {
		return x.Affinity
	}
	return nil
}

func (x *WaypointConfig) GetTopologySpreadConstraints() []*v1.TopologySpreadConstraint {
	if x != nil {
		return x.TopologySpreadConstraints
	}
	return nil
}

func (x *WaypointConfig) GetNodeSelector() *v1.NodeSelector {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *WaypointConfig) GetToleration() []*v1.Toleration {
	if x != nil {
		return x.Toleration
	}
	return nil
}

// Configuration for NetworkPolicy
type NetworkPolicyConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Controls whether default NetworkPolicy resources will be created.
	Enabled       bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkPolicyConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

var File_pkg_apis_values_types_proto protoreflect.FileDescriptor
